import{_ as s,o as n,h as a,Q as p}from"./chunks/framework.79314373.js";const l="/assets/640-20240921001410816.6c8ff2c7.webp",e="/assets/640-20240921001410833.90346ae0.webp",o="/assets/640-20240921001410816.6c8ff2c7.webp",c="/assets/640-20240921001410925.1e23e0e6.webp",t="/assets/640-20240921001410856.d26daff1.webp",r="/assets/640-20240921001410905.4d68c51f.webp",E="/assets/640-20240921001410832.3b4aca06.webp",S=JSON.parse('{"title":"奥卡姆剃刀：让事情回归简单 | PlantUml","description":"","frontmatter":{"title":"奥卡姆剃刀：让事情回归简单","tags":[null,null],"head":[["meta",{"name":"keywords","content":"奥卡姆剃刀：让事情回归简单 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"og:title","content":"奥卡姆剃刀：让事情回归简单 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"奥卡姆剃刀：让事情回归简单 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"奥卡姆剃刀：让事情回归简单 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"奥卡姆剃刀：让事情回归简单 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"DDD/引用相关文章/奥卡姆剃刀：让事情回归简单.md","filePath":"DDD/引用相关文章/奥卡姆剃刀：让事情回归简单.md","lastUpdated":1737644799000}'),i={name:"DDD/引用相关文章/奥卡姆剃刀：让事情回归简单.md"},y=p('<blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>觉得本文讲的特别好，所以备份了一下</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/ITROxS25grCvjNMKEhxB8Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/ITROxS25grCvjNMKEhxB8Q</a></p><p>原文公众号：从码农到工匠</p></div></blockquote><div class="tip custom-block"><p class="custom-block-title">读者读后感</p><blockquote><p>我看过无数的业务系统，喜欢拿业务流程编排说事情。因此，在业务系统中，可以看到各种五花八门的“弯弯绕设计”。</p></blockquote><p>读者点评：<strong>讲真的，我看到很多业务代码，都是脱裤子放屁，而且把精力放在了不应该注意的地方，反而没有精力去处理业务流程的过程分解上，业务流程写的一团糟。光是一堆 XO 各种嵌套的转化，就让那些开发人员瞳孔涣散了。</strong></p><hr><blockquote><p>你校验器是叫Validator还是Checker并没有什么本质区别，团队自己定义就好了</p><p>但我相信，减法可以让COLA更加符合奥卡姆精神，帮助COLA轻装上阵，走的更远。</p></blockquote><p>读者点评：</p><ul><li><strong>其实讲真的，一个布道师敢于面对自己以前设计上的不足，本身就是很有勇气的表现。敬佩万分！</strong></li><li><strong>我没有用过 COLA 框架，但见过很多业务系统上的 commonBus 的设计，让我很难受，我也和别人争辩过，说那个设计不合理，非得跟我说 COLA 就这么做的。我当时真的很无语，现在终于 COLA 去掉了。</strong></li><li><strong>这也反映了一点，其实 COLA 一开始的想法上，什么都想做。</strong><ul><li>业务架构其实不比 Spring 这种技术框架，核心就是 <code>过程拆解</code>，而 <code>过程拆解</code> 是无法用框架很好的 <code>不失业务语义</code> 的表达出来的。 至于 COLA ，个人认为更多的，它最重要的是体现了 <code>分包、分层</code> 的思想。</li><li>正如原文作者所说：校验器叫什么无所谓，有个校验器就行。</li></ul></li><li><strong>业务身份和扩展点的思想，其实不应该在 COLA 中。（这个只是读者的一家之言）</strong><ul><li>业务身份和扩展点，其实应该是可选择的。它在很多业务系统中可能是不存在的。那么就应该构建 脚手架的时候可以选择 四种模式： <ul><li>web</li><li>service</li><li>web+extension</li><li>service+extension</li></ul></li><li><strong>当然，我认为状态机组件应该也是可选的（这个只是读者的一家之言）</strong></li></ul></li></ul></div><p>最近，阿里云的同学告诉我，COLA作为应用架构，已经被选入阿里云的Java应用初始化的应用架构选项之一。</p><p><img src="'+l+'" alt="图片"></p><p>This is really something，于是，在这个里程碑节点上，我开始回过头来，重新审视COLA一路走来的得与失。</p><p><strong>COLA作为一种架构思想无疑是成功的。但是作为框架，个人感觉有点鸡肋之嫌。</strong> 特别是在简洁性上做的不好，感觉做了不少画蛇添足的事情。</p><p>试想一下，有些功能我作为作者都很少去使用，我实在想不到，它为什么还有存在的理由。</p><p>基于上面的思考，我做了这一次COLA 2.0 到 COLA 3.0的升级。在本次升级中，我没有增加任何新的功能，而是尽量多删减了一些概念和功能。让COLA可以更加纯粹的focus在应用架构上，而不是框架支持和架构约束上。</p><p><strong>支持我做这些决策的背后原因只有一个——奥卡姆剃刀原理。</strong></p><h2 id="奥卡姆剃刀原理" tabindex="-1">奥卡姆剃刀原理 <a class="header-anchor" href="#奥卡姆剃刀原理" aria-label="Permalink to &quot;奥卡姆剃刀原理&quot;">​</a></h2><p><strong>奥卡姆剃刀原理，是指如无必要，勿增实体</strong>（Entities should not be multiplied unnecessarily），即“简单有效原理”。正如奥卡姆在《箴言书注》2卷15题说“切勿浪费较多东西去做，用较少的东西，同样可以做好的事情。”</p><p><img src="'+e+'" alt="图片"></p><p>在具体的应用过程中，我们可以遵循以下原则去做事情：“如果同一个现象有n种理论，最简单的那个便是最正确的。能用n做好事情，那就不要有第n+1个动作。”</p><p>比如，《皇帝的新衣》的皇帝到底穿没穿衣服呢？如果你在现场，你很有可能就是大臣之一。</p><p><img src="'+o+'" alt="图片"></p><p>如果懂得了奥卡姆剃刀原理，可以用逻辑手段，判断谁是真理。</p><p><strong>第一种逻辑如下</strong>：假设皇帝是真的穿了衣服→假设愚蠢的人看不见→假设你就是愚蠢的人→所以你没看见皇帝穿衣服。</p><p><strong>第二种逻辑如下</strong>：假设皇帝没穿衣服→所以你没看见皇帝穿衣服。</p><p>同样看见光身子的皇帝，第二种解释简单明了。而第一种解释，可能正因为它是错误的，就需要更多假设来补救漏洞，就像说谎圆谎一样。</p><p><strong>真相不需要伪装掩饰，简单明了。</strong></p><p>再比如，地心说和日心说，托勒密的地心说模型是一个本轮均轮模型。人们可以按照这个模型，定量计算行星的运动，据此推测行星所在的位置。</p><p>到了中世纪后期随着观察仪器的不断改进，人们能够更加精确地测量出行星的位置和运动，观测到行星实际位置与这个模型的计算结果存在偏差，一开始还能勉强应付，<strong>后来小本轮增加到八十多个，却仍然不能精确地计算出行星的准确位置</strong>。</p><p><img src="'+c+'" alt="图片"></p><p>1543年，波兰天文学家哥白尼在临终时发表了一部具有历史意义的著作—《天体运行论》。这个理论体系提出了一个明确的观点：太阳是宇宙的中心，一切行星都在围绕太阳旋转。该理论认为，地球也是行星之一，它一方面像陀螺一样自转，一方面又和其他行星一样围绕太阳转动。</p><p><img src="'+t+'" alt="图片"></p><p><strong>哥白尼的计算不仅结构严谨，而且计算简单</strong>，与已经加到八十余个圈的地心说相比，哥白尼的计算与实际观测资料能更好地吻合。因此，地心说最终被日心说所取代。</p><h2 id="设计中的弯弯绕" tabindex="-1">设计中的弯弯绕 <a class="header-anchor" href="#设计中的弯弯绕" aria-label="Permalink to &quot;设计中的弯弯绕&quot;">​</a></h2><p><strong>深入考察一下，我们系统中，类似于“地心说”这样的弯弯绕的设计，实在是不在少数</strong>。</p><p><strong>从系统架构的角度看</strong>，有些弯弯绕是因为系统边界划分不合理，导致职责不清，依赖混乱。</p><p><strong>从应用架构的角度看</strong>，有些弯弯绕是因为过度设计，为了追求所谓的灵活性和可扩展性，使用了不恰当的设计。导致本来可以直观呈现的代码逻辑，被各种包装，各种隐藏，各种转发.... 无形中极大的阻碍了代码的可读性和可理解性，增加了维护成本。</p><p>举个例子，<strong>我看过无数的业务系统，喜欢拿业务流程编排说事情。因此，在业务系统中，可以看到各种五花八门的“弯弯绕设计”。</strong></p><p>比如，在一个业务系统中，我看到了如下的pipeline设计。这个设计的本质是说把一个复杂的业务操作进行结构化拆解为多个小的处理单元。</p><p><img src="'+r+`" alt="图片"></p><p>拆解是正确的，但是这种处理方式显然不够“奥卡姆”（关于更多结构化分解的内容，可以看我的另一篇文章）。作为维护人员，进入“入口函数”后，还要去查数据库，然后才能知道哪些组件被调用了，太绕了，不够直观，也不简洁。</p><p><strong>同样的逻辑，按照下面的方式写不香吗？</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateCSPUExecutor</span><span style="color:#E1E4E8;"> {    </span></span>
<span class="line"><span style="color:#E1E4E8;">		@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> InitContextStep initContextStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckRequiredParamStep checkRequiredParamStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckUnitStep checkUnitStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckExpiringDateStep checkExpiringDateStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckBarCodeStep checkBarCodeStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckBarCodeImgStep checkBarCodeImgStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckBrandCategoryStep checkBrandCategoryStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckProductDetailStep checkProductDetailStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CheckSpecImgStep checkSpecImgStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CreateCSPUStep createCSPUStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CreateCSPULogStep createCSPULogStep;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SendCSPUCreatedEventStep sendCSPUCreatedEventStep;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Long </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(MyCspuSaveParam </span><span style="color:#FFAB70;">myCspuSaveParam</span><span style="color:#E1E4E8;">){        </span></span>
<span class="line"><span style="color:#E1E4E8;">        checkRequiredParamStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkUnitStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkExpiringDateStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkBarCodeStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkBarCodeImgStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkBrandCategoryStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkProductDetailStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        checkSpecImgStep.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        createCSPUStep.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        createCSPULogStep.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        sendCSPUCreatedEventStep.</span><span style="color:#B392F0;">sendEvent</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getCspu</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateCSPUExecutor</span><span style="color:#24292E;"> {    </span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> InitContextStep initContextStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckRequiredParamStep checkRequiredParamStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckUnitStep checkUnitStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckExpiringDateStep checkExpiringDateStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckBarCodeStep checkBarCodeStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckBarCodeImgStep checkBarCodeImgStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckBrandCategoryStep checkBrandCategoryStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckProductDetailStep checkProductDetailStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CheckSpecImgStep checkSpecImgStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CreateCSPUStep createCSPUStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CreateCSPULogStep createCSPULogStep;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SendCSPUCreatedEventStep sendCSPUCreatedEventStep;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(MyCspuSaveParam </span><span style="color:#E36209;">myCspuSaveParam</span><span style="color:#24292E;">){        </span></span>
<span class="line"><span style="color:#24292E;">        checkRequiredParamStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkUnitStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkExpiringDateStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkBarCodeStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkBarCodeImgStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkBrandCategoryStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkProductDetailStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        checkSpecImgStep.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        createCSPUStep.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        createCSPULogStep.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        sendCSPUCreatedEventStep.</span><span style="color:#6F42C1;">sendEvent</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getCspu</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>这种写法简单直观，易维护，与前一种方式相比，具有同样的组件复用性。符合奥卡姆剃刀的精神，相比较而言，前面那种弯弯绕设计，虽然看起来有点设计感，带来了一点点OCP的好处。但是无端增加了理解和认知成本，孰优孰劣，不难分辨。</p><h2 id="cola-3-0-升级" tabindex="-1">COLA 3.0 升级 <a class="header-anchor" href="#cola-3-0-升级" aria-label="Permalink to &quot;COLA 3.0 升级&quot;">​</a></h2><p>做了这么长的铺垫，终于到了批斗COLA中“弯弯绕设计”的时候了。</p><h3 id="去掉command" tabindex="-1">去掉Command <a class="header-anchor" href="#去掉command" aria-label="Permalink to &quot;去掉Command&quot;">​</a></h3><p>在COLA的初始阶段，因为受到CQRS的影响，于是想到了使用命令模式来处理用户请求。设计的初衷是想通过框架，一方面强制约束Command和Query的处理方式，另一方面把Service里面的逻辑，强制拆分到CommandExecutor中去，防止Service膨胀过快。</p><p>和上面介绍过的pipeline设计类似，这种设计有点绕，不够直观，如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetricsServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetricsServiceI</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CommandBusI commandBus;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addATAMetric</span><span style="color:#E1E4E8;">(ATAMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> commandBus.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addSharingMetric</span><span style="color:#E1E4E8;">(SharingMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> commandBus.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addPatentMetric</span><span style="color:#E1E4E8;">(PatentMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  commandBus.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addPaperMetric</span><span style="color:#E1E4E8;">(PaperMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  commandBus.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetricsServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetricsServiceI</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CommandBusI commandBus;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addATAMetric</span><span style="color:#24292E;">(ATAMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> commandBus.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addSharingMetric</span><span style="color:#24292E;">(SharingMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> commandBus.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addPatentMetric</span><span style="color:#24292E;">(PatentMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  commandBus.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addPaperMetric</span><span style="color:#24292E;">(PaperMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  commandBus.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    	}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>看起来还挺干净的，可是ATAMetricAddCmd到底是被哪个Executor处理的呢，不直观。我还要去理解CommandBus，以及CommandBus是如何注册Executor的。无形中增加了认知成本，不好。</p><p>既然这样，为何不用奥卡姆剃刀把这个CommandBus剔除呢。如下所示，去除CommandBus之后，代码是不是直观了很多，唯一的损失是我们会失去框架层面提供的Interceptor功能，然而，Interceptor正是我下一个要动刀的地方。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetricsServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetricsServiceI</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ATAMetricAddCmdExe ataMetricAddCmdExe;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SharingMetricAddCmdExe sharingMetricAddCmdExe;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> PatentMetricAddCmdExe patentMetricAddCmdExe;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> PaperMetricAddCmdExe paperMetricAddCmdExe;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addATAMetric</span><span style="color:#E1E4E8;">(ATAMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ataMetricAddCmdExe.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addSharingMetric</span><span style="color:#E1E4E8;">(SharingMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sharingMetricAddCmdExe.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addPatentMetric</span><span style="color:#E1E4E8;">(PatentMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  patentMetricAddCmdExe.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">addPaperMetric</span><span style="color:#E1E4E8;">(PaperMetricAddCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  paperMetricAddCmdExe.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetricsServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetricsServiceI</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ATAMetricAddCmdExe ataMetricAddCmdExe;    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SharingMetricAddCmdExe sharingMetricAddCmdExe;    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PatentMetricAddCmdExe patentMetricAddCmdExe;    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PaperMetricAddCmdExe paperMetricAddCmdExe;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addATAMetric</span><span style="color:#24292E;">(ATAMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ataMetricAddCmdExe.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addSharingMetric</span><span style="color:#24292E;">(SharingMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sharingMetricAddCmdExe.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addPatentMetric</span><span style="color:#24292E;">(PatentMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  patentMetricAddCmdExe.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">addPaperMetric</span><span style="color:#24292E;">(PaperMetricAddCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  paperMetricAddCmdExe.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="去掉interceptor" tabindex="-1">去掉Interceptor <a class="header-anchor" href="#去掉interceptor" aria-label="Permalink to &quot;去掉Interceptor&quot;">​</a></h3><p>当时设计Interceptor，是因为有CommandBus作为基础，为了更好的利用命令模式带来的好处，便添加了Interceptor功能。其本质是一个AOP处理。</p><p><strong>鉴于Spring的AOP功能已经很完善了，这个设计也是有点鸡肋</strong>。事实证明，大家在使用COLA框架的时候，很少会使用Interceptor，包括我自己也是一样。既然如此，剔除也罢。</p><h3 id="去掉convertor、validator、assembler" tabindex="-1">去掉Convertor、Validator、Assembler <a class="header-anchor" href="#去掉convertor、validator、assembler" aria-label="Permalink to &quot;去掉Convertor、Validator、Assembler&quot;">​</a></h3><p>关于命名的重要性，这里就不赘述了。当时想着是否能从框架层面，规范一下一些常用功能的命名。但是在实际使用中，发现这个想法也是有些过于理想化了。</p><p>我记得，在团队实践COLA的初期，还经常为什么是Convertor（转换器），什么是Assembler（组装器）的事情，争论不休。</p><p>后面我仔细想了想，命名虽然很重要，但其作用域最多也就是一个团队规范，<strong>你校验器是叫Validator还是Checker并没有什么本质区别，团队自己定义就好了</strong>。尝试从框架层面去解决团队约定问题，其效果不会太好，因此也果断挥刀剔除。</p><h3 id="类扫描优化" tabindex="-1">类扫描优化 <a class="header-anchor" href="#类扫描优化" aria-label="Permalink to &quot;类扫描优化&quot;">​</a></h3><p><strong>业务身份和扩展点的思想，是TMF的核心理念，也是阿里业务中台的进行多业务支持的核心方法论</strong>。</p><p>COLA致力于提供一种轻量级的扩展实现方式，因此该功能得以在奥卡姆的屠刀下得以保存。因为COLA的扩展点设计是借鉴了中台的TMF，因此在前面的设计中，其类扫描方案是直接照搬TMF的做法。</p><p>实际上，TMF的类扫描方案对COLA来说有点多余。因为COLA本身就是架设在Spring的基础之上，而Spring又是建立在类扫描的基础之上。因此，我们完全可以复用Spring的类扫描，没必要自己写一套。</p><p>在原生的Spring中，至少有3种方式可以获取到用户自定义Annotation的Bean，最简洁的是通过 <code>ListableBeanFactory.getBeansWithAnnotation</code>方法，或者使用 <code>ClassPathScanningCandidateComponentProvider</code>进行扫包。</p><p>在这次改版中，我选用的是 <code>getBeansWithAnnotation</code>方法，主要是为了获取@Extension的Bean，用来实现扩展点功能，废弃了原来的TMF类扫描实现。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>触发这次升级的动机，主要是因为，自己在实践COLA的过程中，的确发现有些华而不实的功能。在COLA作为阿里云的基础应用架构，其影响力越来越大的时候，我有责任给到大家一个正确的引导——<strong>去伪存真，简洁有效，而不是引入更多的复杂度</strong>。</p><p>实际上，COLA是有两部分组成的：</p><p><strong>一方面COLA是一种架构思想</strong>，是整合了洋葱圈架构、适配器架构、DDD、整洁架构、TMF等架构思想的一种应用架构。</p><p><img src="`+E+'" alt="图片"></p><p>在这次升级中，架构思想部分基本没有变化，唯一一点是因为去除了Command概念，因此CQRS也成了可选项，而不再是一种强要求。</p><p><strong>另一方面COLA也是框架组件</strong>，通过这次升级，我使用奥卡姆剃刀砍掉了绝大部分的组件能力，仅仅保留了扩展点功能。其用意是不希望COLA作为框架给到应用开发者太多的约束，这不符合简单有效的风格。</p><p>所以，总结下来，与其说这是一次升级，不如说它是功能“降级”，是在做减法。</p><p><strong>但我相信，减法可以让COLA更加符合奥卡姆精神，帮助COLA轻装上阵，走的更远</strong>。</p><p>COLA开源地址：<a href="https://github.com/alibaba/COLA" target="_blank" rel="noreferrer">https://github.com/alibaba/COLA</a></p>',69),d=[y];function m(u,b,C,A,h,g){return n(),a("div",null,d)}const v=s(i,[["render",m]]);export{S as __pageData,v as default};
