import{_ as n,g as a,o,h as c,j as r,b as l,Q as m,p as e}from"./chunks/framework.79314373.js";const d="/assets/注解组件定义以来关系图-模糊.b966659a.png",E=JSON.parse('{"title":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计 | PlantUml","description":"","frontmatter":{"title":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计","head":[["link",{"rel":"canonical","href":"https://umlcn.com/DDD/项目分层/基于注解驱动的DDD架构-超越COLA的设计.html"}],["meta",{"name":"keywords","content":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"og:title","content":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"一个基于注解驱动的可视化的DDD架构-超越COLA的设计 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"DDD/项目分层/基于注解驱动的DDD架构-超越COLA的设计.md","filePath":"DDD/项目分层/基于注解驱动的DDD架构-超越COLA的设计.md","lastUpdated":1737644799000}'),i={name:"DDD/项目分层/基于注解驱动的DDD架构-超越COLA的设计.md"},s=m('<h2 id="后端框架-spring-最大的败笔是什么" tabindex="-1">后端框架 Spring 最大的败笔是什么？ <a class="header-anchor" href="#后端框架-spring-最大的败笔是什么" aria-label="Permalink to &quot;后端框架 Spring 最大的败笔是什么？&quot;">​</a></h2><p>其实对业务开发来说：Spring 最大的败笔就是设计了 <code>@Service</code> ，什么都可以定义成为一个 <code>@Service</code> 、<code>@Component</code> 这才是 Spring 最大的败笔。</p><p>业务一复杂，就定义了一堆的 <code>@Service</code> 和 <code>@Component</code> 互相依赖，最后定义到最后哪个和哪个依赖关系等等全部不清不楚的。</p><p>业务写的像狗屎一样。反正代码就在那里，一个接口看几天就是看不明白业务逻辑到底是什么！</p><h2 id="_12000-star-的-cola-框架解决了吗" tabindex="-1">12000 star 的 COLA 框架解决了吗？ <a class="header-anchor" href="#_12000-star-的-cola-框架解决了吗" aria-label="Permalink to &quot;12000 star 的 COLA 框架解决了吗？&quot;">​</a></h2><p>我仔细看了看 COLA 的一些使用说明，发现 COLA 并没有解决这个问题。</p><h3 id="如何用代码编写复杂的业务" tabindex="-1">如何用代码编写复杂的业务？ <a class="header-anchor" href="#如何用代码编写复杂的业务" aria-label="Permalink to &quot;如何用代码编写复杂的业务？&quot;">​</a></h3><blockquote><p>1、把当前复杂的业务流程梳理成模型，并映射到应用。</p><p>2、当业务发生变化时，能迅速的调整业务模型，并更新应用和系统代码结构。</p><p><strong>在这个大的链条上，COLA能做的事儿，其实非常少。。。</strong></p><blockquote><p>-- kimmking</p><p>原文链接：<a href="https://kimmking.blog.csdn.net/article/details/141613835" target="_blank" rel="noreferrer">https://kimmking.blog.csdn.net/article/details/141613835</a></p></blockquote></blockquote><p>我个人觉得：其实 COLA 并没有硬性的去控制 <code>业务流程化</code></p><p>我未来想要做的框架的灵感来源于 COLA 的作者的一篇文章：</p><p><a href="https://umlcn.com/DDD/%E5%BC%95%E7%94%A8%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E6%95%99%E4%BC%9A%E4%BD%A0%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E7%9A%84%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">一文教会你如何写复杂业务的代码</a></p><p>其实，我又看了一遍 <code>COLA </code> 的作者写的文章，发现文章中 <code>过程分解</code> + <code>面向对象</code> 的思想已经讲的很清楚了，我觉得 可以换一种方式去表述 <code>业务流程化</code> + <code>节点领域化</code> 。</p><p>而这个思想怎么落实在框架中是一个问题！</p><p>碰巧灵感乍现，可以设计一个基于注解驱动的可视化的 DDD 架构工具实现 <code>业务流程化</code> 的目标。</p><h2 id="我设计了一个基于注解驱动的可视化的ddd架构" tabindex="-1">我设计了一个基于注解驱动的可视化的DDD架构 <a class="header-anchor" href="#我设计了一个基于注解驱动的可视化的ddd架构" aria-label="Permalink to &quot;我设计了一个基于注解驱动的可视化的DDD架构&quot;">​</a></h2>',15),p=e("p",null,[e("img",{src:d,alt:"注解组件定义以来关系图-模糊"})],-1),D=e("blockquote",null,[e("p",null,'关注我的公众号：不止极客，发送："可视化DDD" 即可查收高清图片')],-1);function _(h,C,g,u,A,k){const t=a("center");return o(),c("div",null,[s,r(t,null,{default:l(()=>[p]),_:1}),D])}const O=n(i,[["render",_]]);export{E as __pageData,O as default};
