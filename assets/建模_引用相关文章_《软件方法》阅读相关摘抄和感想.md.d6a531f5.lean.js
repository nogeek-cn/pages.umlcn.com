import{_ as s,g as d,o as i,h as r,p as t,j as l,b as e,Q as n,e as a}from"./chunks/framework.79314373.js";const p="/assets/业务流程在老大的头脑中厮杀.cde1b394.svg",h="/assets/愿景相关概念的类图.47d5be59.svg",c="/assets/逻辑从营业员的大脑到点钞机的“大脑”.f565f6a4.svg",_="/assets/某商业银行针对储户的用例.218a39d1.svg",u="/assets/期望和承诺的平衡点-患者-医院-挂号室.7860b5ce.svg",b="/assets/写标书-不恰当的责任分配.c620d355.svg",q="/assets/写标书-恰当的责任分配.76fa155e.svg",m="/assets/改进模式一-物流变成信息流.87ecbbd9.svg",k="/assets/物流变成信息流-改进示例.95909955.svg",g="/assets/改善信息流转例子--改进前.e4eeb507.svg",f="/assets/改善信息流转例子--改进后.eab92755.svg",P="/assets/人和人之间的协作.adf1206f.svg",T="/assets/人和人协作背后隐藏的改进二.eb5b3169.svg",x="/assets/改进模式三-封装领域逻辑.d13d27a3.svg",M="/assets/封装领域逻辑的例子-封装领域逻辑之前.02187e03.svg",A="/assets/封装领域逻辑的例子-封装领域逻辑之后.5e254396.svg",U="/assets/售票系统的功能需求-不是核心域概念.4fbf4f1f.svg",C="/assets/售票系统的功能需求-核心域概念.d75161fd.svg",v="/assets/ATM的用例.b44caac3.svg",S="/assets/程序员人脑系统用例.b694c51b.svg",L="/assets/用例规约的内容.c407fa44.svg",V="/assets/交流与建模分离.474bda75.png",Lo=JSON.parse('{"title":"《软件方法》阅读相关摘抄和感想 | PlantUml","description":"","frontmatter":{"title":"《软件方法》阅读相关摘抄和感想","head":[["link",{"rel":"canonical","href":"https://umlcn.com/建模/引用相关文章/《软件方法》阅读相关摘抄和感想.html"}],["meta",{"name":"keywords","content":"《软件方法》阅读相关摘抄和感想 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/og.png"}],["meta",{"name":"og:title","content":"《软件方法》阅读相关摘抄和感想 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"《软件方法》阅读相关摘抄和感想 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"《软件方法》阅读相关摘抄和感想 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"《软件方法》阅读相关摘抄和感想 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"建模/引用相关文章/《软件方法》阅读相关摘抄和感想.md","filePath":"建模/引用相关文章/《软件方法》阅读相关摘抄和感想.md","lastUpdated":1740372378000}'),N={name:"建模/引用相关文章/《软件方法》阅读相关摘抄和感想.md"},I=n("",27),w=t("p",null,"老大的头脑是一块一块的战场。所研究的系统是军队，开发团队的领导是指挥官，他负责找到自己的军队最值得投入的战场，指挥军队和敌人厮杀，占领战场，或者防守住敌人的进攻。",-1),y=t("p",null,[t("img",{src:p,alt:"业务流程在老大的头脑中厮杀"})],-1),E=n("",9),D=t("p",null,[t("img",{src:h,alt:"愿景相关概念的类图"})],-1),R=n("",13),B=t("p",null,"业务工人是可以被替换的人脑零件，它可能会被其他业务工人替换， 但更有可能被业务实体(Business Entity)替换。业务实体是组织中的非人智能系统，例如银行的ATM、点钞机、营业系统。",-1),W=t("p",null,"在没有点钞机的时代，储户拿着一摞钞票到银行存钱，营业员需要凭着手感(界面层)一张张数，触摸信号传到大脑(核心域层)，大脑要很快判断钞票的真伪和计数。验钞、计数的逻辑封装在营业员的大脑里，营业员非常累，而且营业员要有经验，小白是干不了的。这样，人力成本高了很多。",-1),J=t("p",null,"有了点钞机，营业员只需要把整叠钞票放进点钞机过一下，点钞机会负责验钞和计数。也就是说，验钞和计数的逻辑从人脑转移到了点钞机的“大脑”，如图3-3所示。营业员轻松了，或者说，银行也就不需要那么多有经验的营业员了。许多信息化程度很高的领域，绝大多数领域逻辑目前已经运行在业务实体中，业务工人主要负责输入信息。银行所属的金融领域就是如此。",-1),K=t("p",null,[t("img",{src:c,alt:"逻辑从营业员的大脑到点钞机的“大脑”"})],-1),O=t("h3",{id:"业务用例指的是希望通过和所研究组织交互获得的价值",tabindex:"-1"},[a("业务用例指的是希望通过和所研究组织交互获得的价值 "),t("a",{class:"header-anchor",href:"#业务用例指的是希望通过和所研究组织交互获得的价值","aria-label":'Permalink to "业务用例指的是希望通过和所研究组织交互获得的价值"'},"​")],-1),F=t("p",null,"业务用例指业务执行者希望通过和所研究组织交互获得的价值。以上面提到的某商业银行为例，储户和银行打交道的目的可能有存款、取款、 转账，所以银行针对储户的用例如图3-9所示。",-1),G=t("p",null,[t("img",{src:_,alt:"某商业银行针对储户的用例"})],-1),X=t("h3",{id:"价值是期望和承诺的平衡点、买卖的平衡点",tabindex:"-1"},[a("价值是期望和承诺的平衡点、买卖的平衡点 "),t("a",{class:"header-anchor",href:"#价值是期望和承诺的平衡点、买卖的平衡点","aria-label":'Permalink to "价值是期望和承诺的平衡点、买卖的平衡点"'},"​")],-1),Q=t("p",null,[a("用好用例，关键在于理解“价值”。"),t("strong",null,"价值是期望和承诺的平衡点、买卖的平衡点。")],-1),$=t("p",null,"例如，以医院为研究对象，“患者挂号”不是用例，因为挂号不是患者对医院的期望和医院对患者的承诺的平衡点。如果挂到了号后医院的服务到此为止，患者到医院来时心中的期望将无法得到满足，或者说医院这个研究对象能承诺向患者提供的价值不是挂号，而是看病。",-1),j=t("p",null,"或者可以这样思考:医院能这样叫卖自己吗？“来呀来呀，我这家医院能挂号呀！”患者一听，“哇，真棒耶，这医院能挂号耶，我赶紧去！” 其实患者巴不得不挂号也能看病，只不过人太多了，需要拿号排队。",-1),H=t("p",null,"如果把研究对象改为医院挂号室，“患者→挂号”就是合适的用例。 患者对挂号室的期望是能挂到号，不会因为挂号室没帮他看病就破口大骂。挂号室对他的承诺也就是能给他号。",-1),z=t("p",null,[t("img",{src:u,alt:"期望和承诺的平衡点-患者-医院-挂号室"})],-1),Y=t("h3",{id:"uml用的好的团队不多并不代表没有价值",tabindex:"-1"},[a("UML用的好的团队不多并不代表没有价值 "),t("a",{class:"header-anchor",href:"#uml用的好的团队不多并不代表没有价值","aria-label":'Permalink to "UML用的好的团队不多并不代表没有价值"'},"​")],-1),Z=t("blockquote",null,[t("p",null,"这里展开说一个问题:多，不代表有价值。经常有建模人员问我， “潘老师，UML用得好的团队多不多？”我只能回答“不多”(参见第1章关于“冠军的心”的阐述)。于是提问者就释然了，哦，用得好的不多，看起来这个东西用处不大，我不学也没关系的。"),t("p",null,"围棋下得好的、足球踢得好的、脑外科手术做得好的、身材长得好的......都不多，但是一旦突破门槛进入这个圈子，就会有很大的竞争优势。就拿编码来说，可能读者觉得会编码的人挺多的，周围的人大多都会。其实会编码的人数和会吃喝拉撒的人数相比少得可怜，编码编得好的就更少了，但不能由此推导出“编码没用”的结论，相反，正是因为编码有门槛，所以大多数程序员尽管买房不容易，衣食无忧是做得到的。"),t("p",null,"会用活动图(或者再退一步，会用流程图)来建模业务流程的人已经算是少的了，更多的是随意画的“草图”，更普遍的应该是什么都不会画或者懒得画，把“脓包”一遮了之。")],-1),tt=t("h3",{id:"工作人员-用word写标书-是不对的",tabindex:"-1"},[a("工作人员“用Word写标书”是不对的 "),t("a",{class:"header-anchor",href:"#工作人员-用word写标书-是不对的","aria-label":'Permalink to "工作人员“用Word写标书”是不对的"'},"​")],-1),ot=t("p",null,"分配给业务对象的责任必须是该对象有能力承担的。在这一点上，我们平时的说话是含糊的，很容易造成误导。例如，“工作人员用Word写标 书”这样的说法好像可以接受，但是如果按照说话的文字不假思索画出图4-20,就看出责任分配好像不对。",-1),lt=t("p",null,[t("img",{src:b,alt:"写标书-不恰当的责任分配"})],-1),et=t("p",null,"Word无法承担写标书的责任，这个软件系统里应该没有任何一句代 码提到“标书”的概念，只有“文档”“段落”“字体”等概念。当前编辑的文档到底是标书还是黄色小说，工作人员的大脑才知道，应该改为：",-1),at=t("p",null,[t("img",{src:q,alt:"写标书-恰当的责任分配"})],-1),nt=n("",8),st=t("p",null,[t("strong",null,"改进模式一：物流变成信息流")],-1),dt=t("p",null,"和信息的光电运输比起来，用其他手段运输的物的流转速度就显得太慢了，而且运输成本会随着距离的增加而明显增加。如果同类物的不同实例之间可以相互取代，那么可以提炼物中包含的部分或全部有价值的信息，在需要发生物流的地方，改为通过软件系统交换信息，需要物的时候再将信息变成物，这样可以大大增加流转速度和降低流转成本，",-1),it=t("p",null,[t("img",{src:m,alt:"改进模式一:物流变成信息流"})],-1),rt=t("p",null,"例如，市民要了解新闻，可以去报摊买报纸看，但这会产生各种物流，如果把报纸中包含的有价值信息提炼出来，通过软件系统传送，各种物流就消失了，如图4-40所示。",-1),pt=t("p",null,"过去二三十年的信息化改进主要着力点就是物流变成信息流。这方面改进对人类社会已经产生了明显的影响。现钞用得越来越少，信件被电子邮件、短信、QQ和微信取代，照相胶卷已经绝迹，人们口中的“文件” 默认的不再是纸质文件。",-1),ht=t("p",null,[t("img",{src:k,alt:"物流变成信息流-改进示例"})],-1),ct=t("p",null,"了解了改进一，我们在观察业务流程时，要注意观察各种物的流动，并提炼物背后承载的信息。注意，不要忘了还有人的流动，人可是一个几十千克的物。例如，从图4-40的左侧，可以发现这么几个物流: 市民从家里挪到报摊再挪回家里，钞票从家里挪到报摊，报纸从报摊挪到家里。",-1),_t=t("p",null,"除了信息化起步较晚的领域之外，目前各领域在“物流变成信息流” 方面留下的改进空间已经不多。随之而来要面对的是信息流转不通畅的问题。",-1),ut=t("p",null,[t("strong",null,"改进模式二：改善信息流转")],-1),bt=t("p",null,"软件系统越来越多，而各个软件系统之间沟通不畅，导致一个人为了达到某个目的可能需要和多个软件系统打交道，如果把各软件系统之间的协调工作改为由一个软件系统来完成，人只需要和单个软件系统打交道， 信息的流转就改进了，如图4-41所示。",-1),qt=t("p",null,"如图4-42所示，调度科为了出一份报表，不得不在多个业务实体之间疲于奔命(虽然可能只是鼠标在奔)，在中间插入新系统之后，工作量减 OK 126软件方法(上):业务建模和需求(第2版) 少了很多，如图4-43所示。",-1),mt=t("p",null,[t("img",{src:g,alt:"改善信息流转例子--改进前"})],-1),kt=t("p",null,[t("img",{src:f,alt:"改善信息流转例子--改进后"})],-1),gt=t("p",null,"了解了改进二，我们在观察业务流程时，要注意观察信息流转不通畅的地方，特别是一些隐蔽的地方。很多人和人的协作中，可能隐藏了信息流转不畅的情况。如图4-44所示，专员请求经理审核活动计划，计划是一份电子文件，不离开座位就可以传递，不存在改进一，但是如果更仔细地观察，会得到图4-45,就可以知道存在改进二。如果不影响最终的改进方案，可以不用画出下一个级别的细节，画出图4-44即可。",-1),ft=t("p",null,[t("img",{src:P,alt:"人和人之间的协作"})],-1),Pt=t("p",null,[t("img",{src:T,alt:"人和人协作背后隐藏的改进二"})],-1),Tt=t("p",null,[t("strong",null,"改进模式三：封装领域逻辑")],-1),xt=t("p",null,"在业务流程中，有很多步骤是由人脑来判断和计算的，领域逻辑封装在人脑中。相对于计算机，人脑存在成本高、状态不稳定、会徇私舞弊等问题。如果能够提炼人脑中封装的领域逻辑，改为封装到软件系统中，用软件系统代替人脑，业务流程就得到了改进。",-1),Mt=t("p",null,"封装领域逻辑的改进如图4-46所示。",-1),At=t("p",null,[t("img",{src:x,alt:"改进模式三-封装领域逻辑"})],-1),Ut=t("p",null,"如图4-47左侧，思考和计算由销售员负责，组织需要雇用许多有一定经验的销售员，成本相当高。如果能够把销售员大脑中的经验提炼出来， 封装到软件系统中，如图4-47右侧所示，组织的成本就降下来了。",-1),Ct=t("p",null,[t("img",{src:M,alt:"封装领域逻辑的例子-封装领域逻辑之前"})],-1),vt=t("p",null,[t("img",{src:A,alt:"封装领域逻辑的例子-封装领域逻辑之后"})],-1),St=n("",11),Lt=n("",5),Vt=t("p",null,"上面说的交互还引出一个问题:假设售票员使用鼠标和售票系统交互，按道理，比起售票员来，鼠标离售票系统更近，为什么不把鼠标作为售票系统的执行者呢？还有，假设售票系统运行在Windows操作系统之上，那么Windows是不是售票系统的执行者？",-1),Nt=t("p",null,"辨别的要点就是:执行者和系统发生的交互是系统的功能需求。如图， 5-9上部的序列图所示，售票员能自如地辨认并控制鼠标，是因为她的大脑里安装了如何使用鼠标的专家系统(可能是老师，也可能是父母安装的)。 猴子的大脑里没有这个系统，所以它很可能看到鼠标就一把抓起来往嘴里送。鼠标的移动和点击如何变成有效的输入事件，则由操作系统(包含了鼠 第5章需求之系统用例图151-吴 标驱动程序)负责。以上这些交互都不是售票系统的核心域概念，售票员和售票系统之间的交互才是，所以售票员才是售票系统的执行者。",-1),It=t("p",null,[t("img",{src:U,alt:"售票系统的功能需求-不是核心域概念"})],-1),wt=t("p",null,[t("img",{src:C,alt:"售票系统的功能需求-核心域概念"})],-1),yt=t("h3",{id:"系统用例的定义-系统能够为执行者提供的、涉众可以接受的价值。",tabindex:"-1"},[a("系统用例的定义：系统能够为执行者提供的、涉众可以接受的价值。 "),t("a",{class:"header-anchor",href:"#系统用例的定义-系统能够为执行者提供的、涉众可以接受的价值。","aria-label":'Permalink to "系统用例的定义：系统能够为执行者提供的、涉众可以接受的价值。"'},"​")],-1),Et=t("h3",{id:"价值是买卖的平衡点",tabindex:"-1"},[a("价值是买卖的平衡点 "),t("a",{class:"header-anchor",href:"#价值是买卖的平衡点","aria-label":'Permalink to "价值是买卖的平衡点"'},"​")],-1),Dt=t("p",null,"系统用例的定义:系统能够为执行者提供的、涉众可以接受的价值。 和第3章的业务用例相比较，研究对象从组织变成了系统。要理解好系统用例，重点依然是之前所强调的买卖平衡点、期望和承诺平衡点。",-1),Rt=t("p",null,"以ATM为例，“储户→登录”不是它的用例，因为储户对ATM的期望以及ATM能做的承诺不只是登录。或者这样思考，ATM不能这么叫卖: “来啊来啊！我这里能登录啊”，然后储户就说“哇，真棒，这正是我想要ATM提供的服务，好，我去用一用”。",-1),Bt=t("p",null,"或者可以设想可能观察到的场景:",-1),Wt=t("blockquote",null,[t("p",null,"张三要出差，发现身上没现金，到ATM那里取现金，然后离开ATM忙别的去了。"),t("p",null,"客户给张三卡里转了5000元，电话请张三查收，张三到ATM那里看看自己的卡当前余额多少，脑子里想想是不是比之前多了5000元，然后离开ATM忙别的去了。")],-1),Jt=t("p",null,"以上两个场景在典型的业务流程中可以观察到，而下面的场景就比较离谱了:",-1),Kt=t("blockquote",null,[t("p",null,"************,张三到ATM那里登录，然后离开ATM忙别的去了。")],-1),Ot=t("p",null,"所以，ATM正确和错误的用例如图5-13所示。",-1),Ft=t("p",null,[t("img",{src:v,alt:"ATM的用例"})],-1),Gt=t("p",null,"用例之前的许多需求方法学，把需求定义为思考系统“做什么”， 用例把需求提升到思考系统“卖什么”的高度。这种思考是非常艰难的， 因为它没有标准答案，只有最佳答案。要得到这个最佳答案，不能靠拍脑袋，必须揣摩涉众。要得到合适的用例，需要有一颗善于体察他人的心。 如果建模人员总是习惯于从自己的角度想问题，那么让他思考“什么是系统应该提供的价值”有时甚至会让他痛苦到想要逃避，或者干脆用功能、 特性等模糊不清的词语代替。",-1),Xt=t("p",null,"但是逃是逃不开的，生活中处处都需要这样的思考。人们求职、求偶不就是要搞清楚“我”这个人脑系统应该卖给谁，卖什么服务的最佳答案吗？ 我会吃喝拉撒，你不愿意为此给我报酬；你想要长生不老，我又提供不了这么大的价值。要找到一个我能干好而且你又乐意买单的平衡点，确实很难。",-1),Qt=t("h5",{id:"程序员的用例是编代码-不是赚钱",tabindex:"-1"},[a("程序员的用例是编代码，不是赚钱 "),t("a",{class:"header-anchor",href:"#程序员的用例是编代码-不是赚钱","aria-label":'Permalink to "程序员的用例是编代码，不是赚钱"'},"​")],-1),$t=t("p",null,"例如，“程序员”这个人脑系统为它的老板提供的用例是什么？安装开发工具？编码？为公司赚钱？答案是编码，这是老板对程序员的期望以及程序员可以提供的承诺的平衡点，或者说，这是程序员能卖、老板愿意买的价值。程序员不能因为装了个Visual Studio就理直气壮地向老板要报酬，老板不给就生气；程序员按要求编出了代码，老板就不能因为销售部门不给力或经济崩溃导致赚不到钱而责怪程序员。正确和错误的用例如图5-14所示。",-1),jt=t("p",null,[t("img",{src:S,alt:"程序员人脑系统用例"})],-1),Ht=t("p",null,"程序员如果摆错了自己的位置，没有好好完成编码的本职工作，反倒是动不动向老板上“万言书”，对公司的发展方向大放厥词，老板是不会喜欢的，因为他不期望从程序员身上“购买”这个服务(用某知名企业领导人的话说就是:有精神病就送医院，没精神病就辞退)。",-1),zt=t("p",null,"可见，搞清楚自己的“用例”，认清自己的定位，对人生多么重要。 如果您不断通过用例思维来思考系统的价值，就能训练出越来越强大的发现价值的能力。无论打工还是创业，这种发现价值的能力都可以让您受益。",-1),Yt=t("h3",{id:"用例的命名是动宾结构",tabindex:"-1"},[a("用例的命名是动宾结构 "),t("a",{class:"header-anchor",href:"#用例的命名是动宾结构","aria-label":'Permalink to "用例的命名是动宾结构"'},"​")],-1),Zt=t("blockquote",null,[t("p",null,"用例的命名是动宾结构，例如“取现金”。动词前面可以加状语，宾语前面可以加定语，把一句话的主语砍掉，剩下的可以作为用例的名字。"),t("p",null,"给用例起名时不要使用弱动词。用例之前的需求技术，可能是以“名字+-动词”的形式命名系统的功能，例如“发票作废”，后来要改成用例的动宾结构了，有的建模人员就在前面加一个弱动词“进行”，就变成了“进行发票作废”，这个也是不合适的。"),t("p",null,"如果“名词+动词”已经成为行业中的一个术语，也未必要严格的动宾结构。例如“成果分析”在某行业是一个术语，也就不必硬要倒过来变成“分析成果”了。")],-1),to=t("h3",{id:"需求之系统用例规约-用例规约怎么划分",tabindex:"-1"},[a("需求之系统用例规约，用例规约怎么划分 "),t("a",{class:"header-anchor",href:"#需求之系统用例规约-用例规约怎么划分","aria-label":'Permalink to "需求之系统用例规约，用例规约怎么划分"'},"​")],-1),oo=t("p",null,"用例图表达了用例的目标，但是对于完整的需求来说，这是远远不够的。用例的背后封装了不同级别的相关需求，我们需要通过书写用例规约把这些需求表达出来。用例规约就是以用例为核心来组织需求内容的需求规约。有了用例规约，可以不需要另外写其他格式的需求规约。用例规约的各项内容用类图展示如图6-1所示。",-1),lo=t("p",null,"图6-1的各项内容中，执行者和用例在用例图中已经存在，照搬到用例规约中就可以。剩下的内容用例图上没有，需要另行添加。目前UML 并未包含用例规约的表示法。过去常见的做法是用Word等文字处理器来书写用例规约，不过扁平文本形式难以高效建立和维护用例各项内容之间的关系。现在已经有专门用于编写用例规约的工具，例如Case Complete, Visual Use Case等，而且越来越多的UML建模工具也开始提供编写用例规约的功能，使得需求人员能够以“立体”的方式来书写和保存用例规约， 并以文本、图形、表格等各种视图查看或输出，",-1),eo=t("p",null,[t("img",{src:L,alt:"用例规约的内容"})],-1),ao=n("",6),no=t("p",null,"理解以下两个要点，有助于克服需求启发中的障碍。",-1),so=t("p",null,[t("strong",null,"(1)和涉众交流的形式应该采用视图，而不是模型")],-1),io=t("p",null,"经常有人问:客户看不懂UML怎么办？这个问题本身就存在问题。 提问者潜意识里可能认为“客户”是一个人。所谓“客户”其实是一大堆“涉众”，他们从事的工种不同，学历职位有高有低，年龄有大有小，健康有好有坏，关注的利益更是各自不同，怎么能寄望用一种介质和所有的涉众沟通？ 第1章说过UML的优点是提高沟通的效率，还拿五线谱做了类比。五线谱是音乐专业人士交流的工具，作曲要懂、编曲要懂、乐手要懂、指挥 一246软件方法(上):业务建模和需求(第2版) 要懂、歌手要懂(注意:是懂五线谱，不是人人都要用五线谱作曲)，但听音乐的不需要懂五线谱。同样地，UML只是在“软件开发人员”圈子里面的统一表示法，基于UML的沟通主要是发生在开发团队内部，不能强行拿着UML模型和涉众沟通。",-1),ro=t("p",null,"那么，和涉众交流的介质是什么呢？不是需求模型本身，而是需求模型的各种视图。面对大领导，我们可以给他放幻灯片交流愿景；中层干部喜欢看文档，我们可以按照他喜欢的格式给他炮制文档；一线操作工只关心他那一小块工作，我们可以制作界面原型和他交流；有时候甚至有的涉众根本不喜欢看任何东西，我们还可以通过“谈话”这种视图和他交流。 涉众连谈话都不乐意，我们也可以通过观察来获取素材。需求启发的技能有许多种，不仅仅是浅薄的“画个界面草图给用户看”，“问用户想要什么功能”。许多伟大的创新正是有心人在涉众不作声的情况下，观察涉众的行为得到的。",-1),po=t("p",null,"如果不了解这个区分，直接拿UML模型去和涉众交流，很容易导致“四不像”。为了迁就不同涉众的知识水平，开发团队只好损害模型的严谨性，即使是这样，涉众也不一定接受，交流效果还是不好，而且还会因为涉众的交流形式多变而影响开发团队开发过程的稳定-双方都受害。 客户的领导说，我不习惯看UML模型，就知道以前看的是××标准格式的文档，我只在这个格式的文档上签字，难道我们就不用UML建模了？下一个项目的客户领导喜欢另一种格式怎么办？下下个项目根本不需要签字怎么办？大众产品没有“客户领导”签字确认需求怎么办？不少开发团队十年如一日没有进步和积累，“交流影响开发”是原因之一。",-1),ho=t("p",null,"开发人员有意无意把建模的目的理解成和涉众交流，有时背后的思想还是“懒”字，因为这样想，就有了推卸责任的机会:不是我不想建模， 就算我建模了，客户不想看啊。",-1),co=t("p",null,"需求视图和需求模型分离，交流和建模分离。在面对不同涉众时，需求人员可以灵活使用各种启发方式，见人说人话，见鬼说鬼话；回到开发团队内部时，则改用专业手段交流，这样团队才能慢慢形成稳定、严谨的开发过程(见图7-1)。",-1),_o=t("p",null,[t("img",{src:V,alt:"交流与建模分离"})],-1),uo=t("p",null,[t("strong",null,"(2)和涉众交流的内容应该聚焦涉众利益，而不是需求")],-1),bo=t("p",null,"软件的需求规约相当于电影剧本。电影剧本不是由观众直接提供，而是由编剧根据不同观众的口味编出来的。同样，软件需求不是由涉众直接提供的，而是由需求人员综合不同涉众的利益来决定的。涉众没有资格， 也没有责任提供需求。",-1),qo=t("p",null,"**首先，涉众没有资格提供需求。**系统的需求是平衡各种涉众利益得到的，不由单一涉众决定。以ATM机为例，如果需求人员询问ATM机的执行者储户“取款机应该怎么做你觉得最好”，储户回答大实话“最好像我家抽屉一样拉开就拿，喏，把我家里的抽屉拿去做原型”，需求人员显然不能把这个“抽屉”当真，只需要把“抽屉”背后的涉众利益提炼出来储户希望操作次数尽可能少一些。最终系统的需求是否尊重这个利益，就要看储户在涉众排行榜上的排位了。",-1),mo=t("p",null,"**其次，涉众没有责任提供需求。**涉众可能很忙，可能没有能力。说得极端一点，婴儿只会哭会笑，婴儿产品的需求就不用做了？需求人员还是要把责任揽过来，涉众只需表达高兴不高兴就行了。",-1),ko=t("p",null,"不了解“交流的内容聚焦于涉众利益”，需求人员很容易把涉众提出 的解决方案当成需求，或者抱怨涉众没有“说清楚需求”。",-1),go=t("p",null,"拿患者和医生类比可以帮助理解上面说的这两点。患者喜欢和医生交流自己的磁共振成像，医生就给他多做磁共振检查？患者懒得看甚至昏迷不醒，医生就干脆不做？患者说“我腿疼，可能得了腿癌，我要做放疗”，医生就给他做放疗？",-1),fo=t("p",null,"显然不是这样，医生应该按照成熟的治疗套路，该做什么检查就做什么检查，该如何治疗就如何治。医生哄不肯吃药的小患者“来，叔叔给你吃颗糖糖”，但回到办公室和护士却要说“我刚给某某患者用了多少量的某某药，你记一下”。",-1),Po=n("",4);function To(xo,Mo,Ao,Uo,Co,vo){const o=d("center");return i(),r("div",null,[I,t("blockquote",null,[w,l(o,null,{default:e(()=>[y]),_:1})]),E,t("blockquote",null,[l(o,null,{default:e(()=>[D]),_:1})]),R,t("blockquote",null,[B,W,J,l(o,null,{default:e(()=>[K]),_:1})]),O,t("blockquote",null,[F,l(o,null,{default:e(()=>[G]),_:1})]),X,t("blockquote",null,[Q,$,j,H,l(o,null,{default:e(()=>[z]),_:1})]),Y,Z,tt,t("blockquote",null,[ot,l(o,null,{default:e(()=>[lt]),_:1}),et,l(o,null,{default:e(()=>[at]),_:1})]),nt,t("blockquote",null,[st,dt,l(o,null,{default:e(()=>[it]),_:1}),rt,pt,l(o,null,{default:e(()=>[ht]),_:1}),ct,_t,ut,bt,qt,mt,kt,gt,l(o,null,{default:e(()=>[ft]),_:1}),l(o,null,{default:e(()=>[Pt]),_:1}),Tt,xt,Mt,l(o,null,{default:e(()=>[At]),_:1}),Ut,l(o,null,{default:e(()=>[Ct]),_:1}),l(o,null,{default:e(()=>[vt]),_:1}),St]),Lt,t("blockquote",null,[Vt,Nt,l(o,null,{default:e(()=>[It]),_:1}),l(o,null,{default:e(()=>[wt]),_:1})]),yt,Et,t("blockquote",null,[Dt,Rt,Bt,Wt,Jt,Kt,Ot,l(o,null,{default:e(()=>[Ft]),_:1}),Gt,Xt]),Qt,t("blockquote",null,[$t,l(o,null,{default:e(()=>[jt]),_:1}),Ht,zt]),Yt,Zt,to,t("blockquote",null,[oo,lo,l(o,null,{default:e(()=>[eo]),_:1})]),ao,t("blockquote",null,[no,so,io,ro,po,ho,co,l(o,null,{default:e(()=>[_o]),_:1}),uo,bo,qo,mo,ko,go,fo]),Po])}const Vo=s(N,[["render",To]]);export{Lo as __pageData,Vo as default};
