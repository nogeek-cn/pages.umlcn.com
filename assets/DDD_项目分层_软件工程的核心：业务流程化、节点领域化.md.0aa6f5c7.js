import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.79314373.js";const p="/assets/内容中台审核平台类图.c5e612b9.svg",o="/assets/业务流程化、节点领域化.6108c4eb.svg",F=JSON.parse('{"title":"软件工程的核心：业务流程化、节点领域化 | PlantUml","description":"","frontmatter":{"title":"软件工程的核心：业务流程化、节点领域化","tags":[null,null],"head":[["link",{"rel":"canonical","href":"https://umlcn.com/DDD/项目分层/软件工程的核心：业务流程化、节点领域化.html"}],["meta",{"name":"keywords","content":"软件工程的核心：业务流程化、节点领域化 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"og:title","content":"软件工程的核心：业务流程化、节点领域化 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"软件工程的核心：业务流程化、节点领域化 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"软件工程的核心：业务流程化、节点领域化 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"软件工程的核心：业务流程化、节点领域化 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"DDD/项目分层/软件工程的核心：业务流程化、节点领域化.md","filePath":"DDD/项目分层/软件工程的核心：业务流程化、节点领域化.md","lastUpdated":1737644799000}'),e={name:"DDD/项目分层/软件工程的核心：业务流程化、节点领域化.md"},t=l(`<h1 id="软件工程的核心-业务流程化、节点领域化" tabindex="-1">软件工程的核心：业务流程化、节点领域化 <a class="header-anchor" href="#软件工程的核心-业务流程化、节点领域化" aria-label="Permalink to &quot;软件工程的核心：业务流程化、节点领域化&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">核心观点：</p><blockquote><p>《软件方法》一书中说：关于改进业务序列图，找到系统竞争力一般有三种改进措施。</p><p>改进模式一：<strong>物流变成信息流</strong>。</p><ul><li>举例：报纸变成门户网站</li></ul><p>改进模式二：<strong>改善信息流转</strong>。</p><ul><li>举例：有一个聚合网站把淘宝和京东的信息聚合起来展示</li></ul><p>改进模式三：<strong>封装领域逻辑</strong>。</p><ul><li>举例：销售员自行选择供应商 转变成 系统录入各个供应商的各种信息，由系统判断，应该选择哪一个供应商。</li></ul></blockquote><p><strong>软件工程核心目标是实现业务需求的核心愿景。</strong></p><p><strong>而核心愿景的实现借助业务流程在软件中的映射实现。</strong></p><hr><p>在工程设计（代码实现方面）的核心有两点：</p><ul><li>业务流程化</li><li>节点领域化</li></ul></div><p><strong>软件工程的核心：业务流程化，节点领域化。</strong> 这个是我今天跟一个朋友讨论工程的时候。我突然里面迸发出来的一句话。</p><p>比如：我以前曾经做了支付宝内容中台审核平台的代码重构工作。现在回顾起来。业务流程化，和节点领域化分别在我的代码和产品中都有所体现。</p><ul><li>可视化的流程编排，反映“业务流程化”</li><li>节点的多态处理，体现“节点领域化”</li></ul><h2 id="业务流程化" tabindex="-1">业务流程化 <a class="header-anchor" href="#业务流程化" aria-label="Permalink to &quot;业务流程化&quot;">​</a></h2><h3 id="反例" tabindex="-1">反例 <a class="header-anchor" href="#反例" aria-label="Permalink to &quot;反例&quot;">​</a></h3><p>先举一个反例。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 校验</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 转化</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 保存到数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 校验</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 转化</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 保存到数据库</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个就是没有一点流程化。貌似已经流程化。但是，这个处理是任何代码都可以写成这种格式。</p><p>这不叫业务流程化。所有流程都这么做，那就完全反映不出来业务的流程。</p><h3 id="正例" tabindex="-1">正例 <a class="header-anchor" href="#正例" aria-label="Permalink to &quot;正例&quot;">​</a></h3><p>一文教会你如何写复杂代码 中的代码示例</p><p>为例</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Phase</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnSaleProcessPhase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> PublishOfferStep publishOfferStep;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> BackOfferBindStep backOfferBindStep;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">//省略其它step</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(OnSaleContext </span><span style="color:#FFAB70;">onSaleContext</span><span style="color:#E1E4E8;">){        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	SupplierItem supplierItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onSaleContext.</span><span style="color:#B392F0;">getSupplierItem</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成OfferGroupNo        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">generateOfferGroupNo</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">       	</span><span style="color:#6A737D;">// 发布商品        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">publishOffer</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 前后端库存绑定 backoffer域        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">bindBackOfferStock</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 同步库存路由 backoffer域        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">syncStockRoute</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置虚拟商品拓展字段        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">setVirtualProductExtension</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发货保障打标 offer域        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">markSendProtection</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录变更内容ChangeDetail        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">recordChangeDetail</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 同步供货价到BackOffer</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">syncSupplyPriceToBackOffer</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是组合商品打标，写扩展信息</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">setCombineProductExtension</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 去售罄标</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">removeSellOutTag</span><span style="color:#E1E4E8;">(offerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发送领域事件</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">fireDomainEvent</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 关闭关联的待办事项</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">closeIssues</span><span style="color:#E1E4E8;">(supplierItem);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Phase</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnSaleProcessPhase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PublishOfferStep publishOfferStep;    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BackOfferBindStep backOfferBindStep;    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">//省略其它step</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(OnSaleContext </span><span style="color:#E36209;">onSaleContext</span><span style="color:#24292E;">){        </span></span>
<span class="line"><span style="color:#24292E;">      	SupplierItem supplierItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onSaleContext.</span><span style="color:#6F42C1;">getSupplierItem</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成OfferGroupNo        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">generateOfferGroupNo</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">       	</span><span style="color:#6A737D;">// 发布商品        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">publishOffer</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 前后端库存绑定 backoffer域        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">bindBackOfferStock</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 同步库存路由 backoffer域        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">syncStockRoute</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置虚拟商品拓展字段        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">setVirtualProductExtension</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发货保障打标 offer域        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">markSendProtection</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录变更内容ChangeDetail        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">recordChangeDetail</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 同步供货价到BackOffer</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">syncSupplyPriceToBackOffer</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是组合商品打标，写扩展信息</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">setCombineProductExtension</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 去售罄标</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">removeSellOutTag</span><span style="color:#24292E;">(offerId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发送领域事件</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">fireDomainEvent</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 关闭关联的待办事项</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">closeIssues</span><span style="color:#24292E;">(supplierItem);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>这就是把业务给流程化。</p><p>这个代码，绝大多数初学者也能看懂。初学者也能看懂的代码未必不是好代码。 而且这个代码，即使产品来看，也大概能够理解其中的业务处理的流程每一步都做了哪些事情。</p><p>这就是 骨架 + 皮肉 的皮肉，骨架就是，有多少个节点。每个节点到底是在做什么事情。</p><blockquote><p>除非你的应用有极强的流程可视化和编排的诉求，否则我非常不推荐使用流程引擎等工具。</p><p>-- COLA作者《疑问教会你如何写复杂业务的代码》</p></blockquote><h3 id="流程编排下的做法" tabindex="-1">流程编排下的做法 <a class="header-anchor" href="#流程编排下的做法" aria-label="Permalink to &quot;流程编排下的做法&quot;">​</a></h3><p>笔者曾经在蚂蚁金服，做过内容中台审核平台的可视化编排以及可视化审核通过条件设置方式。</p><p>首先，背景，是需要接入更多的场景化审核条件支持，以及更多的部门接入内容中台。那么，原有的代码写死的审核流程不符合未来的发展。所以，我们启用了新一轮的重构。而这一次的技术选型已经整体设计是我来做的。</p><p>我的分析是这样子的：</p><p>第一步：先有一个抽象的对象。 内容（属性：图文、视频、纯文本）</p><p>第二步：标识出来所有的，可配置的审核通过条件</p><p>第三步：抽象出来，内容应该流入审核流程的路由标识</p><p>第四步：根据标识选择审核预处理的所有原子组件</p><p>第五步：基于路由，选择预处理的原则组件集合。顺序处理（同步、异步）</p><p>第六步：审核预处理组件处理完毕之后，根据运营人员配置的对应路由标识下的通过规则，判断对应内容是否审核通过。</p><p>核心类图是：</p><p><img src="`+p+`" alt="内容中台审核平台类图"></p><p>这是后端的架构的处理类图。但其实到这一步，其实还是远远不够的，还需要一整套的产品流程，才叫完整的业务流程化。</p><p>比如，我们可以让运营，配置好路由规则之后，在预发环境，验证路由规则是否生效。判断某个文章是否走了某个路由。如果验证正确一键从预发环境同步到生产环境。</p><p>然后，我们前端通过，所有内容指标项的勾选，然后，配置上，所有的数值比值操作 <code>&gt;</code> 、<code>=</code> 、<code>&lt;</code> 、<code>&gt;=</code> 、 <code>&lt;=</code> 等等，判断操作 <code>是</code> 、<code>否</code> 等。基于前端的运营的配置，自动生成我的 velocity 脚本，用 velocity 脚本表达式，去计算出需要的被判断属性的值。</p><p>然后通过，前端的可视化展示，给前端展示出来，他对应的某个路由下的所有规则。</p><blockquote><p>脚本的生成、测试、上线全部全部由运营完成。</p></blockquote><blockquote><p>我想说：<strong>事件风暴式的领域驱动设计就是伪命题。</strong> 因为它会导致业务没有流程化了。</p></blockquote><h2 id="节点领域化" tabindex="-1">节点领域化 <a class="header-anchor" href="#节点领域化" aria-label="Permalink to &quot;节点领域化&quot;">​</a></h2><h3 id="反例-1" tabindex="-1">反例 <a class="header-anchor" href="#反例-1" aria-label="Permalink to &quot;反例&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String id;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String id;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>节点领域化，就是，我们将具体的前边业务流程化的每个流程节点，进行领域内部逻辑的封装，也就是把这个对象的某些特性的封装在对象之内。比如 内容：是否是一个文本，内容是否是一个图文视频。</p><p>然后就实现了节点领域化。但是又有人又要说了，那我这个对象的特性如果是依赖外部条件来判断，那我是否能把这个领域特性封装在这个对象内部，如果可以那该怎么做呢？</p><p>对象的特性，是对象本身的方法。这个特性不会独立于这个对象来存在的情况下，那么这个对象，有一个方法返回这个特性的值，从面向对象的角度来分析，是没有违反设计原则的，当然，你可以进行反驳。</p><p>那么我们来考虑，我这个对象，依赖外部依赖来判断我当前的值，那我应该怎么办？</p><h3 id="第一种方法-借助函数式编程" tabindex="-1">第一种方法：借助函数式编程 <a class="header-anchor" href="#第一种方法-借助函数式编程" aria-label="Permalink to &quot;第一种方法：借助函数式编程&quot;">​</a></h3><p>可以在外部，构建，对应特性计算的计算类，内部有一个方法，是计算该对象的某个特性，然后，在引用这个对象时，将一段函数计算，作为参数传到当前的对象的参数方法中，这个，可以首先，对象特性的方法的外置，也可以实现对象中有了加载该特性的方法。当然，我是觉得这种方式不够，面向对象，因为这个面向对象我这个属性值的计算逻辑不应该以参数的形式传进来。因为我这个属性值就不需要方法啊</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Content</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passRiskControl</span><span style="color:#E1E4E8;">(Function&lt;</span><span style="color:#F97583;">Content</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">passRiskFunction</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> passRiskFunction.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Compontent</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassRiskPreCheck</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// 依赖的外部接口 </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resourse</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RemoteRiskControl remoteRiskControl;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(Content </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	Function&lt;</span><span style="color:#F97583;">Content</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; passRiskFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (innerContent) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> remoteRiskControl.</span><span style="color:#B392F0;">checkRisk</span><span style="color:#E1E4E8;">(innerContent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> content.</span><span style="color:#B392F0;">passRiskControl</span><span style="color:#E1E4E8;">(passRiskFunction);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Content</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passRiskControl</span><span style="color:#24292E;">(Function&lt;</span><span style="color:#D73A49;">Content</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">passRiskFunction</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> passRiskFunction.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Compontent</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassRiskPreCheck</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// 依赖的外部接口 </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resourse</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RemoteRiskControl remoteRiskControl;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(Content </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	Function&lt;</span><span style="color:#D73A49;">Content</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; passRiskFunction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (innerContent) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> remoteRiskControl.</span><span style="color:#6F42C1;">checkRisk</span><span style="color:#24292E;">(innerContent);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> content.</span><span style="color:#6F42C1;">passRiskControl</span><span style="color:#24292E;">(passRiskFunction);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="第二种方法-借助spring静态上下文工具类" tabindex="-1">第二种方法：借助Spring静态上下文工具类 <a class="header-anchor" href="#第二种方法-借助spring静态上下文工具类" aria-label="Permalink to &quot;第二种方法：借助Spring静态上下文工具类&quot;">​</a></h3><p>借助框架有两种方式，一种是，使用 上下文静态的方法获取到外部依赖的处理，这个方式我个人方式是不推荐的。因为这种方法会导致依赖关系不明确，就是，其实我是不知道我当前对象依赖了哪些外部的资源，静态上下文的方式，这个问题尤其严重。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Content</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passRiskControl</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> BeanUtils.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(PassRiskPreCheck.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">          	.</span><span style="color:#B392F0;">checkRisk</span><span style="color:#E1E4E8;">(innerContent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 依赖的外部接口</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Compontent</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassRiskPreCheck</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RemoteRiskControl remoteRiskControl;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkRisk</span><span style="color:#E1E4E8;">(Content </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> remoteRiskControl.</span><span style="color:#B392F0;">checkRisk</span><span style="color:#E1E4E8;">(innerContent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Content</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passRiskControl</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> BeanUtils.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(PassRiskPreCheck.class)</span></span>
<span class="line"><span style="color:#24292E;">          	.</span><span style="color:#6F42C1;">checkRisk</span><span style="color:#24292E;">(innerContent);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 依赖的外部接口</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Compontent</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassRiskPreCheck</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RemoteRiskControl remoteRiskControl;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkRisk</span><span style="color:#24292E;">(Content </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> remoteRiskControl.</span><span style="color:#6F42C1;">checkRisk</span><span style="color:#24292E;">(innerContent);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="第三种方式-借助spring的原型实例实现外部依赖的依赖注入" tabindex="-1">第三种方式：借助Spring的原型实例实现外部依赖的依赖注入 <a class="header-anchor" href="#第三种方式-借助spring的原型实例实现外部依赖的依赖注入" aria-label="Permalink to &quot;第三种方式：借助Spring的原型实例实现外部依赖的依赖注入&quot;">​</a></h3><p>首先，我们的要知道，这个对象的生命周期，每次业务流程开始会创建，然后处理流程结束之后会销毁。这是对象的生命周期，然后我们可以同时进行多个对象的同时处理。这个对应到Spring的实例实例中就是原型的实例。</p><p>在Spring去加载对应的原型实例对象过程中，实现外部依赖的依赖注入。这是一个很巧妙的方式。我是觉得这种方式特别推崇。</p><p>既保留了面向对象中，该对象的基本属性，又保证了外部依赖关系的显性化。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.TYPE})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Scope</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DomainEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DomainFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entityClz</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ApplicationContextHelper.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(entityClz);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DomainEntity</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Content</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resourse</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RemoteRiskControl remoteRiskControl;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passRiskControl</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> remoteRiskControl.</span><span style="color:#B392F0;">checkRisk</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 原型 Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      	Content context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DomainFactory.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Content.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 内置方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      	context.</span><span style="color:#B392F0;">passRiskControl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.TYPE})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Scope</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DomainEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DomainFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entityClz</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ApplicationContextHelper.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(entityClz);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DomainEntity</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Content</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resourse</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RemoteRiskControl remoteRiskControl;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passRiskControl</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> remoteRiskControl.</span><span style="color:#6F42C1;">checkRisk</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 原型 Bean</span></span>
<span class="line"><span style="color:#24292E;">      	Content context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DomainFactory.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Content.class);</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 内置方法</span></span>
<span class="line"><span style="color:#24292E;">      	context.</span><span style="color:#6F42C1;">passRiskControl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><img src="`+o+'" alt="业务流程化、节点领域化.svg"></p><p>业务流程化、节点领域化</p><p>好了，本文介绍完了，什么叫业务流程化，什么叫节点领域化。</p><p>借助这 十字真言，相信你必定可以在应对复杂业务的过程中得心应手。</p>',60),c=[t];function r(E,i,y,b,u,m){return n(),a("div",null,c)}const C=s(e,[["render",r]]);export{F as __pageData,C as default};
