import{_ as s,o as n,h as a,Q as p}from"./chunks/framework.79314373.js";const l="/assets/640-20240920221324079.dcc27e9f.webp",e="/assets/640-20240920221324116.ead61231.webp",o="/assets/640-20240920221324113.be551b9d.webp",t="/assets/640-20240920221324135.8e0bac67.webp",c="/assets/640-20240920221415575.43c51fc7.webp",r="/assets/640-20240920221324109.38dd4767.webp",E="/assets/640-20240920221324098.a151b878.webp",y="/assets/640-20240920221324131.eda590f9.webp",i="/assets/640-20240920221324160.ba8e70af.webp",u="/assets/640-20240920221324162.7411d68b.webp",S=JSON.parse('{"title":"一文教会你如何写复杂业务的代码 | PlantUml","description":"","frontmatter":{"title":"一文教会你如何写复杂业务的代码","tags":[null,null],"head":[["meta",{"name":"keywords","content":"一文教会你如何写复杂业务的代码 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"og:title","content":"一文教会你如何写复杂业务的代码 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"一文教会你如何写复杂业务的代码 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"一文教会你如何写复杂业务的代码 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"一文教会你如何写复杂业务的代码 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"DDD/引用相关文章/一文教会你如何写复杂业务的代码.md","filePath":"DDD/引用相关文章/一文教会你如何写复杂业务的代码.md","lastUpdated":1737644799000}'),b={name:"DDD/引用相关文章/一文教会你如何写复杂业务的代码.md"},m=p('<blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>觉得本文讲的特别好，所以备份了一下</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/o1Cf0jpzfKIkqe-ZqwkKZg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/o1Cf0jpzfKIkqe-ZqwkKZg</a></p><p>原文公众号：从码农到工匠</p></div></blockquote><hr><div class="tip custom-block"><p class="custom-block-title">读者读后感</p><hr><blockquote><p>大胆断言一下，全天下估计80%对流程引擎的使用都是得不偿失的。</p></blockquote><p>读者点评：<strong>反正我看过的很多人自制的流程引擎，搞得代码更加不伦不类。只有坏处，没有好处。这点和笔者特别共鸣，可惜，很多自制流程引擎的却不自知。</strong></p><hr><blockquote><p>过程分解+对象模型 的方法论</p></blockquote><p>读者点评：<strong>其实对很多业务来说：单纯的过程分解，就已经可以将 80 % 的业务复杂度问题，都可以降低到可控的局面了。用好过程分解，把业务代码写的更优雅。</strong></p><p><strong>（后边这句话仅是一家之言：对象模型，也会有对象模型的全部加载的性能问题，还有对象模型本身的复杂性问题。）</strong></p></div><p>了解我的人都知道，我一直在致力于应用架构和代码复杂度的治理。</p><p>这两天在看零售通商品域的代码。面对零售通如此复杂的业务场景，如何在架构和代码层面进行应对，是一个新课题。针对该命题，我进行了比较细致的思考和研究。结合实际的业务场景，我沉淀了一套“如何写复杂业务代码”的方法论，在此分享给大家。</p><p>我相信，同样的方法论可以复制到大部分复杂业务场景。</p><h1 id="一个复杂业务的处理过程" tabindex="-1">一个复杂业务的处理过程 <a class="header-anchor" href="#一个复杂业务的处理过程" aria-label="Permalink to &quot;一个复杂业务的处理过程&quot;">​</a></h1><h2 id="业务背景" tabindex="-1">业务背景 <a class="header-anchor" href="#业务背景" aria-label="Permalink to &quot;业务背景&quot;">​</a></h2><p>简单的介绍下业务背景，零售通是给线下小店供货的B2B模式，我们希望通过数字化重构传统供应链渠道，提升供应链效率，为新零售助力。阿里在中间是一个平台角色，提供的是Bsbc中的service的功能。</p><p><img src="'+l+'" alt="图片"></p><p>在商品域，运营会操作一个“上架”动作，上架之后，商品就能在零售通上面对小店进行销售了。<strong>是零售通业务非常关键的业务操作之一，因此涉及很多的数据校验和关联操作</strong>。</p><p>针对上架，一个简化的业务流程如下所示：</p><p><img src="'+e+'" alt="图片"></p><h2 id="过程分解" tabindex="-1">过程分解 <a class="header-anchor" href="#过程分解" aria-label="Permalink to &quot;过程分解&quot;">​</a></h2><p>像这么复杂的业务，我想应该没有人会写在一个service方法中吧。一个类解决不了，那就分治吧。</p><p>说实话，能想到分而治之的工程师，已经做的不错了，至少比没有分治思维要好很多。我也见过复杂程度相当的业务，连分解都没有，就是一堆方法和类的堆砌。</p><p>不过，这里存在一个问题：即很多同学过度的依赖工具或是辅助手段来实现分解。比如在我们的商品域中，类似的分解手段至少有3套以上，有自制的流程引擎，有依赖于数据库配置的流程处理：</p><p><img src="'+o+'" alt="图片"></p><p>本质上来讲，这些辅助手段做的都是一个pipeline的处理流程，没有其它。因此，我建议此处最好保持KISS（Keep It Simple and Stupid），即<strong>最好是什么工具都不要用，次之是用一个极简的Pipeline模式，最差是使用像流程引擎这样的重方法</strong>。</p><p>除非你的应用有极强的流程可视化和编排的诉求，否则我非常不推荐使用流程引擎等工具。第一，它会引入额外的复杂度，特别是那些需要持久化状态的流程引擎；第二，它会割裂代码，导致阅读代码的不顺畅。<strong>大胆断言一下，全天下估计80%对流程引擎的使用都是得不偿失的</strong>。</p><p>回到商品上架的问题，这里问题核心是工具吗？是设计模式带来的代码灵活性吗？显然不是，<strong>问题的核心应该是如何分解问题和抽象问题</strong>，知道金字塔原理的应该知道，此处，我们可以使用结构化分解将问题解构成一个有层级的金字塔结构：</p><p><img src="'+t+`" alt="图片"></p><p>按照这种分解写的代码，就像一本书，目录和内容清晰明了。</p><p>以商品上架为例，程序的入口是一个上架命令（OnSaleCommand）, 它由三个阶段（Phase）组成。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Commandpublic</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnSaleNormalItemCmdExe</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OnSaleContextInitPhase onSaleContextInitPhase;  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OnSaleDataCheckPhase onSaleDataCheckPhase;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OnSaleProcessPhase onSaleProcessPhase;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Response </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(OnSaleNormalItemCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	OnSaleContext onSaleContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(cmd);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">checkData</span><span style="color:#E1E4E8;">(onSaleContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(onSaleContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Response.</span><span style="color:#B392F0;">buildSuccess</span><span style="color:#E1E4E8;">();    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OnSaleContext </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(OnSaleNormalItemCmd </span><span style="color:#FFAB70;">cmd</span><span style="color:#E1E4E8;">) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> onSaleContextInitPhase.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(cmd);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkData</span><span style="color:#E1E4E8;">(OnSaleContext </span><span style="color:#FFAB70;">onSaleContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	onSaleDataCheckPhase.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(onSaleContext);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(OnSaleContext </span><span style="color:#FFAB70;">onSaleContext</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">      	onSaleProcessPhase.</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(onSaleContext);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Commandpublic</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnSaleNormalItemCmdExe</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OnSaleContextInitPhase onSaleContextInitPhase;  </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OnSaleDataCheckPhase onSaleDataCheckPhase;    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OnSaleProcessPhase onSaleProcessPhase;</span></span>
<span class="line"><span style="color:#24292E;">  	</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Response </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(OnSaleNormalItemCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	OnSaleContext onSaleContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(cmd);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkData</span><span style="color:#24292E;">(onSaleContext);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(onSaleContext);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Response.</span><span style="color:#6F42C1;">buildSuccess</span><span style="color:#24292E;">();    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OnSaleContext </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(OnSaleNormalItemCmd </span><span style="color:#E36209;">cmd</span><span style="color:#24292E;">) {        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> onSaleContextInitPhase.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(cmd);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkData</span><span style="color:#24292E;">(OnSaleContext </span><span style="color:#E36209;">onSaleContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      	onSaleDataCheckPhase.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(onSaleContext);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(OnSaleContext </span><span style="color:#E36209;">onSaleContext</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">      	onSaleProcessPhase.</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(onSaleContext);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>每个Phase又可以拆解成多个步骤（Step），以 <code>OnSaleProcessPhase</code>为例，它是由一系列Step组成的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Phase</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnSaleProcessPhase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> PublishOfferStep publishOfferStep;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> BackOfferBindStep backOfferBindStep;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">//省略其它step</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(OnSaleContext </span><span style="color:#FFAB70;">onSaleContext</span><span style="color:#E1E4E8;">){        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	SupplierItem supplierItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onSaleContext.</span><span style="color:#B392F0;">getSupplierItem</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成OfferGroupNo        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">generateOfferGroupNo</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">       	</span><span style="color:#6A737D;">// 发布商品        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">publishOffer</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 前后端库存绑定 backoffer域        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">bindBackOfferStock</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 同步库存路由 backoffer域        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">syncStockRoute</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置虚拟商品拓展字段        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">setVirtualProductExtension</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发货保障打标 offer域        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">markSendProtection</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录变更内容ChangeDetail        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">recordChangeDetail</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 同步供货价到BackOffer</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">syncSupplyPriceToBackOffer</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是组合商品打标，写扩展信息</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">setCombineProductExtension</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 去售罄标</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">removeSellOutTag</span><span style="color:#E1E4E8;">(offerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发送领域事件</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">fireDomainEvent</span><span style="color:#E1E4E8;">(supplierItem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 关闭关联的待办事项</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#B392F0;">closeIssues</span><span style="color:#E1E4E8;">(supplierItem);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Phase</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnSaleProcessPhase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PublishOfferStep publishOfferStep;    </span></span>
<span class="line"><span style="color:#24292E;">  	@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BackOfferBindStep backOfferBindStep;    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">//省略其它step</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(OnSaleContext </span><span style="color:#E36209;">onSaleContext</span><span style="color:#24292E;">){        </span></span>
<span class="line"><span style="color:#24292E;">      	SupplierItem supplierItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onSaleContext.</span><span style="color:#6F42C1;">getSupplierItem</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成OfferGroupNo        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">generateOfferGroupNo</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">       	</span><span style="color:#6A737D;">// 发布商品        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">publishOffer</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 前后端库存绑定 backoffer域        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">bindBackOfferStock</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 同步库存路由 backoffer域        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">syncStockRoute</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置虚拟商品拓展字段        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">setVirtualProductExtension</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发货保障打标 offer域        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">markSendProtection</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录变更内容ChangeDetail        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">recordChangeDetail</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 同步供货价到BackOffer</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">syncSupplyPriceToBackOffer</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是组合商品打标，写扩展信息</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">setCombineProductExtension</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 去售罄标</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">removeSellOutTag</span><span style="color:#24292E;">(offerId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发送领域事件</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">fireDomainEvent</span><span style="color:#24292E;">(supplierItem);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 关闭关联的待办事项</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6F42C1;">closeIssues</span><span style="color:#24292E;">(supplierItem);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>看到了吗，这就是商品上架这个复杂业务的业务流程。需要流程引擎吗？不需要，需要设计模式支撑吗？也不需要。对于这种业务流程的表达，简单朴素的组合方法模式（Composed Method）是再合适不过的了。</p><p>因此，在做过程分解的时候，我建议工程师不要把太多精力放在工具上，放在设计模式带来的灵活性上。而是应该多花时间在对问题分析，结构化分解，最后通过合理的抽象，形成合适的阶段（Phase）和步骤（Step）上。</p><p><img src="`+c+`" alt="图片"></p><h2 id="过程分解后的两个问题" tabindex="-1">过程分解后的两个问题 <a class="header-anchor" href="#过程分解后的两个问题" aria-label="Permalink to &quot;过程分解后的两个问题&quot;">​</a></h2><p>的确，使用过程分解之后的代码，已经比以前的代码更清晰、更容易维护了。不过，还有两个问题值得我们去关注一下：</p><p><strong>1、领域知识被割裂肢解</strong></p><p>什么叫被肢解？因为我们到目前为止做的都是过程化拆解，导致没有一个聚合领域知识的地方。每个Use Case的代码只关心自己的处理流程，知识没有沉淀。</p><p>相同的业务逻辑会在多个Use Case中被重复实现，导致代码重复度高，即使有复用，最多也就是抽取一个util，代码对业务语义的表达能力很弱，从而影响代码的可读性和可理解性。</p><p><strong>2、代码的业务表达能力缺失</strong></p><p>试想下，在过程式的代码中，所做的事情无外乎就是取数据--做计算--存数据，在这种情况下，要如何通过代码显性化的表达我们的业务呢？说实话，很难做到，因为我们缺失了模型，以及模型之间的关系。脱离模型的业务表达，是缺少韵律和灵魂的。</p><p>举个例子，在上架过程中，有一个校验是检查库存的，其中对于组合品（CombineBackOffer）其库存的处理会和普通品不一样。原来的代码是这么写的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isCombineProduct </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> supplierItem.</span><span style="color:#B392F0;">getSign</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isCombProductQuote</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// supplier.usc warehouse needn&#39;t check</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (WarehouseTypeEnum.</span><span style="color:#B392F0;">isAliWarehouse</span><span style="color:#E1E4E8;">(supplierItem.</span><span style="color:#B392F0;">getWarehouseType</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// quote warehosue check</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtil.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(supplierItem.</span><span style="color:#B392F0;">getWarehouseIdList</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isCombineProduct) {    </span></span>
<span class="line"><span style="color:#E1E4E8;">    		</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionFactory.</span><span style="color:#B392F0;">makeFault</span><span style="color:#E1E4E8;">(ServiceExceptionCode.SYSTEM_ERROR, </span><span style="color:#9ECBFF;">&quot;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// inventory amount check</span></span>
<span class="line"><span style="color:#E1E4E8;">  	Long sellableAmount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isCombineProduct) {    </span></span>
<span class="line"><span style="color:#E1E4E8;">      	sellableAmount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> normalBiz.</span><span style="color:#B392F0;">acquireSellableAmount</span><span style="color:#E1E4E8;">(supplierItem.</span><span style="color:#B392F0;">getBackOfferId</span><span style="color:#E1E4E8;">(), supplierItem.</span><span style="color:#B392F0;">getWarehouseIdList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 组套商品</span></span>
<span class="line"><span style="color:#E1E4E8;">      OfferModel backOffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> backOfferQueryService.</span><span style="color:#B392F0;">getBackOffer</span><span style="color:#E1E4E8;">(supplierItem.</span><span style="color:#B392F0;">getBackOfferId</span><span style="color:#E1E4E8;">());    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (backOffer </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        	sellableAmount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> backOffer.</span><span style="color:#B392F0;">getOffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTradeModel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTradeCondition</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAmountOnSale</span><span style="color:#E1E4E8;">();    </span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sellableAmount </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionFactory.</span><span style="color:#B392F0;">makeFault</span><span style="color:#E1E4E8;">(ServiceExceptionCode.SYSTEM_ERROR, </span><span style="color:#9ECBFF;">&quot;亲，实仓库存必须大于0才能发布，请确认已补货.</span><span style="color:#79B8FF;">\\r</span><span style="color:#9ECBFF;">[id:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> supplierItem.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isCombineProduct </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> supplierItem.</span><span style="color:#6F42C1;">getSign</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isCombProductQuote</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// supplier.usc warehouse needn&#39;t check</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (WarehouseTypeEnum.</span><span style="color:#6F42C1;">isAliWarehouse</span><span style="color:#24292E;">(supplierItem.</span><span style="color:#6F42C1;">getWarehouseType</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// quote warehosue check</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtil.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(supplierItem.</span><span style="color:#6F42C1;">getWarehouseIdList</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isCombineProduct) {    </span></span>
<span class="line"><span style="color:#24292E;">    		</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionFactory.</span><span style="color:#6F42C1;">makeFault</span><span style="color:#24292E;">(ServiceExceptionCode.SYSTEM_ERROR, </span><span style="color:#032F62;">&quot;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// inventory amount check</span></span>
<span class="line"><span style="color:#24292E;">  	Long sellableAmount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isCombineProduct) {    </span></span>
<span class="line"><span style="color:#24292E;">      	sellableAmount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> normalBiz.</span><span style="color:#6F42C1;">acquireSellableAmount</span><span style="color:#24292E;">(supplierItem.</span><span style="color:#6F42C1;">getBackOfferId</span><span style="color:#24292E;">(), supplierItem.</span><span style="color:#6F42C1;">getWarehouseIdList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 组套商品</span></span>
<span class="line"><span style="color:#24292E;">      OfferModel backOffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> backOfferQueryService.</span><span style="color:#6F42C1;">getBackOffer</span><span style="color:#24292E;">(supplierItem.</span><span style="color:#6F42C1;">getBackOfferId</span><span style="color:#24292E;">());    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (backOffer </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        	sellableAmount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> backOffer.</span><span style="color:#6F42C1;">getOffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTradeModel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTradeCondition</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAmountOnSale</span><span style="color:#24292E;">();    </span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sellableAmount </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionFactory.</span><span style="color:#6F42C1;">makeFault</span><span style="color:#24292E;">(ServiceExceptionCode.SYSTEM_ERROR, </span><span style="color:#032F62;">&quot;亲，实仓库存必须大于0才能发布，请确认已补货.</span><span style="color:#005CC5;">\\r</span><span style="color:#032F62;">[id:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> supplierItem.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>然而，如果我们在系统中引入领域模型之后，其代码会简化为如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (backOffer.</span><span style="color:#B392F0;">isCloudWarehouse</span><span style="color:#E1E4E8;">()){    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (backOffer.</span><span style="color:#B392F0;">isNonInWarehouse</span><span style="color:#E1E4E8;">()){    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BizException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (backOffer.</span><span style="color:#B392F0;">getStockAmount</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BizException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;亲，实仓库存必须大于0才能发布，请确认已补货.</span><span style="color:#79B8FF;">\\r</span><span style="color:#9ECBFF;">[id:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> backOffer.</span><span style="color:#B392F0;">getSupplierItem</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getCspuCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (backOffer.</span><span style="color:#6F42C1;">isCloudWarehouse</span><span style="color:#24292E;">()){    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (backOffer.</span><span style="color:#6F42C1;">isNonInWarehouse</span><span style="color:#24292E;">()){    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BizException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (backOffer.</span><span style="color:#6F42C1;">getStockAmount</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BizException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;亲，实仓库存必须大于0才能发布，请确认已补货.</span><span style="color:#005CC5;">\\r</span><span style="color:#032F62;">[id:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> backOffer.</span><span style="color:#6F42C1;">getSupplierItem</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getCspuCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>有没有发现，使用模型的表达要清晰易懂很多，而且也不需要做关于组合品的判断了，因为我们在系统中引入了更加贴近现实的对象模型（CombineBackOffer继承BackOffer），通过对象的多态可以消除我们代码中的大部分的if-else。</p><p><img src="`+r+'" alt="图片"></p><h2 id="过程分解-对象模型" tabindex="-1">过程分解+对象模型 <a class="header-anchor" href="#过程分解-对象模型" aria-label="Permalink to &quot;过程分解+对象模型&quot;">​</a></h2><p>通过上面的案例，我们可以看到<strong>有过程分解要好于没有分解</strong>，<strong>过程分解+对象模型要好于仅仅是过程分解</strong>。对于商品上架这个case，如果采用过程分解+对象模型的方式，最终我们会得到一个如下的系统结构：</p><p><img src="'+E+'" alt="图片"></p><h1 id="写复杂业务的方法论" tabindex="-1">写复杂业务的方法论 <a class="header-anchor" href="#写复杂业务的方法论" aria-label="Permalink to &quot;写复杂业务的方法论&quot;">​</a></h1><p>通过上面案例的讲解，我想说，我已经交代了复杂业务代码要怎么写：<strong>即自上而下的结构化分解+自下而上的面向对象分析</strong>。</p><p>接下来，让我们把上面的案例进行进一步的提炼，形成一个可落地的方法论，从而可以泛化到更多的复杂业务场景。</p><h2 id="上下结合" tabindex="-1">上下结合 <a class="header-anchor" href="#上下结合" aria-label="Permalink to &quot;上下结合&quot;">​</a></h2><p>所谓上下结合，是指我们要<strong>结合自上而下的过程分解和自下而上的对象建模</strong>，螺旋式的构建我们的应用系统。这是一个动态的过程，两个步骤可以交替进行、也可以同时进行。</p><p>这两个步骤是相辅相成的，<strong>上面的分析可以帮助我们更好的理清模型之间的关系，而下面的模型表达可以提升我们代码的复用度和业务语义表达能力</strong>。</p><p>其过程如下图所示：</p><p><img src="'+y+'" alt="图片"></p><p>使用这种上下结合的方式，我们就有可能在面对任何复杂的业务场景，都能写出干净整洁、易维护的代码。</p><h2 id="能力下沉" tabindex="-1">能力下沉 <a class="header-anchor" href="#能力下沉" aria-label="Permalink to &quot;能力下沉&quot;">​</a></h2><p>一般来说实践DDD有两个过程：</p><p><strong>1. 套概念阶段</strong></p><p>了解了一些DDD的概念，然后在代码中“使用”Aggregation Root，Bonded Context，Repository等等这些概念。跟进一步，也会使用一定的分层策略。然而这种做法一般对复杂度的治理并没有多大作用。</p><p><strong>2. 融会贯通阶段</strong></p><p>术语已经不再重要，理解DDD的本质是统一语言、边界划分和面向对象分析的方法。</p><p>大体上而言，我大概是在1.7的阶段，因为有一个问题一直在困扰我，就是哪些能力应该放在Domain层，是不是按照传统的做法，将所有的业务都收拢到Domain上，这样做合理吗？说实话，这个问题我一直没有想清楚。</p><p>因为在现实业务中，很多的功能都是用例特有的（Use case specific）的，如果“盲目”的使用Domain收拢业务并不见得能带来多大的益处。相反，这种收拢会导致Domain层的膨胀过厚，不够纯粹，反而会影响复用性和表达能力。</p><p>鉴于此，我最近的思考是我们应该采用<strong>能力下沉</strong>的策略。</p><p>所谓的能力下沉，是指我们不强求一次就能设计出Domain的能力，也不需要强制让把所有的业务功能都放到Domain层，而是采用实用主义的态度，即只对那些需要在多个场景中需要被复用的能力进行抽象下沉，而不需要复用的，就暂时放在App层的Use Case里就好了。</p><p>注：Use Case是《架构整洁之道》里面的术语，简单理解就是响应一个Request的处理过程</p><p>通过实践，<strong>我发现这种循序渐进的能力下沉策略，应该是一种更符合实际、更敏捷的方法。因为我们承认模型不是一次性设计出来的，而是迭代演化出来的。</strong></p><p>下沉的过程如下图所示，假设两个use case中，我们发现uc1的step3和uc2的step1有类似的功能，我们就可以考虑让其下沉到Domain层，从而增加代码的复用性。</p><p><img src="'+i+`" alt="图片"></p><p><strong>指导下沉有两个关键指标：代码的复用性和内聚性</strong>。</p><p>复用性是告诉我们When（什么时候该下沉了），即有重复代码的时候。内聚性是告诉我们How（要下沉到哪里），功能有没有内聚到恰当的实体上，有没有放到合适的层次上（因为Domain层的能力也是有两个层次的，一个是Domain Service这是相对比较粗的粒度，另一个是Domain的Model这个是最细粒度的复用）。</p><p>比如，在我们的商品域，经常需要判断一个商品是不是最小单位，是不是中包商品。像这种能力就非常有必要直接挂载在Model上。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSPU</span><span style="color:#E1E4E8;"> {    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String code;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String baseCode;    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">//省略其它属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#6A737D;">  	/**     </span></span>
<span class="line"><span style="color:#6A737D;">  	* 单品是否为最小单位。     </span></span>
<span class="line"><span style="color:#6A737D;">  	*/</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isMinimumUnit</span><span style="color:#E1E4E8;">(){        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(code, baseCode);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">    /**     </span></span>
<span class="line"><span style="color:#6A737D;">    * 针对中包的特殊处理     </span></span>
<span class="line"><span style="color:#6A737D;">    */</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isMidPackage</span><span style="color:#E1E4E8;">(){        </span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(code, midPackageCode);    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSPU</span><span style="color:#24292E;"> {    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String code;    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String baseCode;    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">//省略其它属性</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">  	/**     </span></span>
<span class="line"><span style="color:#6A737D;">  	* 单品是否为最小单位。     </span></span>
<span class="line"><span style="color:#6A737D;">  	*/</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isMinimumUnit</span><span style="color:#24292E;">(){        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(code, baseCode);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">    /**     </span></span>
<span class="line"><span style="color:#6A737D;">    * 针对中包的特殊处理     </span></span>
<span class="line"><span style="color:#6A737D;">    */</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isMidPackage</span><span style="color:#24292E;">(){        </span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(code, midPackageCode);    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>之前，因为老系统中没有领域模型，没有CSPU这个实体。你会发现像判断单品是否为最小单位的逻辑是以 <code>StringUtils.equals(code,baseCode)</code>的形式散落在代码的各个角落。这种代码的可理解性是可想而知的，至少在第一眼看到的时候，是完全不知道什么意思。</p><h1 id="业务技术要怎么做" tabindex="-1">业务技术要怎么做 <a class="header-anchor" href="#业务技术要怎么做" aria-label="Permalink to &quot;业务技术要怎么做&quot;">​</a></h1><p>写到这里，我想顺便回答一下很多业务技术同学的困惑，也是我之前的困惑：<strong>即业务技术到底是在做业务，还是做技术？业务技术的技术性体现在哪里？</strong></p><p>通过上面的案例，我们可以看到业务所面临的复杂性并不亚于底层技术，要想写好业务代码也不是一件容易的事情。业务技术和底层技术人员唯一的区别是他们所面临的问题域不一样。</p><p>业务技术面对的问题域变化更多、面对的人更加庞杂。而底层技术面对的问题域更加稳定、但对技术的要求更加深。比如，如果你需要去开发Pandora，你就要对Classloader有更加深入的了解才行。</p><p>但是，不管是业务技术还是底层技术人员，有一些思维和能力都是共通的。比如，<strong>分解问题的能力，抽象思维，结构化思维</strong>等等。</p><p><img src="`+u+'" alt="图片"></p><p>用我的话说就是：<strong>“做不好业务开发的，也做不好技术底层开发，反之亦然。业务开发一点都不简单，只是我们很多人把它做“简单”了</strong></p><p>因此，如果从变化的角度来看，业务技术的难度一点不逊色于底层技术，其面临的挑战甚至更大。因此，我想对广大的从事业务技术开发说：<strong>沉下心来，夯实自己的基础技术能力、OO能力、建模能力... 不断提升抽象思维、结构化思维、思辨思维... 持续学习精进，写好代码。我们可以在业务技术岗做的很”技术“！</strong>。</p>',82),d=[m];function F(C,h,g,f,D,A){return n(),a("div",null,d)}const B=s(b,[["render",F]]);export{S as __pageData,B as default};
