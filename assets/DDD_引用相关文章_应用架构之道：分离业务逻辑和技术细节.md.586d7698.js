import{_ as t,o as a,h as e,Q as o}from"./chunks/framework.79314373.js";const n="/assets/640-20240921002337197.90392d19.webp",r="/assets/640-20240921002337160.be180906.webp",s="/assets/640-20240921002337204.b047785f.webp",i="/assets/640-20240921002337200.30146699.webp",p="/assets/640-20240921002337176.a320d125.webp",l="/assets/640-20240921002337191.e845b03d.webp",c="/assets/640-20240921002337269.c32f4604.jpeg",m="/assets/640.0d3ed9df.jpeg",d="/assets/640-20240921002337261.d108d35e.jpeg",h="/assets/640-20240921002337260.07567128.jpeg",g="/assets/640-20240921002337258.c5ab7f2a.jpeg",u="/assets/640-20240921002337258.c5ab7f2a.jpeg",O=JSON.parse('{"title":"应用架构之道：分离业务逻辑和技术细节 | PlantUml","description":"","frontmatter":{"title":"应用架构之道：分离业务逻辑和技术细节","tags":[null,null],"head":[["link",{"rel":"canonical","href":"https://umlcn.com/DDD/引用相关文章/应用架构之道：分离业务逻辑和技术细节.html"}],["meta",{"name":"keywords","content":"应用架构之道：分离业务逻辑和技术细节 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"og:title","content":"应用架构之道：分离业务逻辑和技术细节 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"应用架构之道：分离业务逻辑和技术细节 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"应用架构之道：分离业务逻辑和技术细节 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"应用架构之道：分离业务逻辑和技术细节 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"DDD/引用相关文章/应用架构之道：分离业务逻辑和技术细节.md","filePath":"DDD/引用相关文章/应用架构之道：分离业务逻辑和技术细节.md","lastUpdated":1740372378000}'),_={name:"DDD/引用相关文章/应用架构之道：分离业务逻辑和技术细节.md"},b=o('<blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>觉得本文讲的特别好，所以备份了一下</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/F5BWyALjJxryZXfb8WcH9g" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/F5BWyALjJxryZXfb8WcH9g</a></p><p>原文公众号：从码农到工匠</p></div></blockquote><div class="tip custom-block"><p class="custom-block-title">读者读后感</p><blockquote><p><strong>应用架构的核心使命就是要分离业务逻辑和技术细节</strong></p></blockquote><p>读者点评：<strong>在现实中，很多屁股坐在架构师位置上的人其实没有理解这句话。这句话的做成需要两个因素：（1. 过程分解）（2. 依赖反转）。过程分解，让业务流程更清晰的展示在代码中。依赖反转，可以把技术细节分装在实现层。</strong></p><p><strong>我不由得想说：“在现实中，很多人同样一行代码写了 20 年，还没搞懂怎没写代码。”</strong></p></div><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><h3 id="什么是架构" tabindex="-1">什么是架构？ <a class="header-anchor" href="#什么是架构" aria-label="Permalink to &quot;什么是架构？&quot;">​</a></h3><p>关于架构这个概念很难给出一个明确的定义，也没有一个标准的定义。</p><p>硬是要给一个概述，我认为<strong>架构就是对系统中的实体以及实体之间的关系所进行的抽象描述。</strong></p><p>架构始于建筑，是因为人类发展（原始人自给自足住在树上，也就不需要架构），分工协作的需要，将目标系统按某个原则进行切分，切分的原则，是要便于不同的角色进行并行工作。</p><h3 id="为什么需要架构" tabindex="-1">为什么需要架构？ <a class="header-anchor" href="#为什么需要架构" aria-label="Permalink to &quot;为什么需要架构？&quot;">​</a></h3><p>有系统的地方就需要架构，大到航空飞机，小到一个电商系统里面的一个功能组件都需要设计和架构。</p><p>我很喜欢《系统架构：复杂系统的产品设计与开发》里面的一句话：<strong>结构良好的创造活动要优于毫无结构的创造活动</strong>。</p><p>与之相对应的，现在很多敏捷思想提倡no design，只要work就好。期待好的架构可以在迭代中自然涌现。这个想法有点太理想化了，在现实中，只要能work的代码，工程师是很少有动力去重构和优化的。</p><h3 id="架构师的职责" tabindex="-1">架构师的职责 <a class="header-anchor" href="#架构师的职责" aria-label="Permalink to &quot;架构师的职责&quot;">​</a></h3><p>作为架构师，我们最重要的价值应该是“化繁为简”。但凡让事情变得更复杂，让系统变得更晦涩难懂的架构都是值得商榷的。</p><p><strong>架构师的工作就是要努力训练自己的思维，用它去理解复杂的系统，通过合理的分解和抽象，使哪些系统不再那么难懂</strong>。我们应该努力构建易懂的架构，使得在系统上工作的其他人员（例如设计者、实现者、操作员等）可以较为容易地理解这个系统。</p><h2 id="软件架构" tabindex="-1">软件架构 <a class="header-anchor" href="#软件架构" aria-label="Permalink to &quot;软件架构&quot;">​</a></h2><p>软件架构是一个系统的草图。软件架构描述的对象是直接构成系统的抽象组件。各个组件之间的连接则明确和相对细致地描述组件之间的通信。在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或者对象。在面向对象领域中，组件之间的连接通常用接口来实现。</p><p>软件架构为<strong>软件系统提供了一个结构、行为和属性的高级抽象</strong>，由构件的描述、构件的相互作用、指导构件集成的模式以及这些模式的约束组成。软件架构不仅显示了软件需求和软件结构之间的对应关系，而且指定了整个软件系统的组织和拓扑结构，提供了一些设计决策的基本原理。</p><p>软件架构的核心价值应该只围绕一个核心命题：控制复杂性。他并不意味着某个特定的分层结构，某个特定的方法论（贫血、DDD等）。</p><h2 id="软件架构分类" tabindex="-1">软件架构分类 <a class="header-anchor" href="#软件架构分类" aria-label="Permalink to &quot;软件架构分类&quot;">​</a></h2><p>在介绍应用架构之前，我们先来看一下软件架构的分类。</p><p>随着互联网的发展，现在的系统要支撑数亿人同时在线购物、通信、娱乐的需要，相应的软件体系结构也变得越来越复杂。软件架构的含义也变得更加宽泛，我们不能简单地用一个软件架构来指代所有的软件架构工作。按照我个人理解，我将软件架构划分为：</p><p><img src="'+n+'" alt="图片"></p><p><strong>业务架构</strong>：由业务架构师负责，也可以称为业务领域专家、行业专家。业务架构属于顶层设计，其对业务的定义和划分会影响组织结构和技术架构。例如，阿里巴巴在没有中台部门之前，每个业务部门的技术架构都是烟囱式的，淘宝、天猫、飞猪、1688等各有一套体系结构。而后，成立了共享平台事业部，打通了账号、商品、订单等体系，让商业基础实施的复用成为可能。</p><p><strong>应用架构</strong>：由应用架构师负责，他需要根据业务场景的需要，设计应用的层次结构，制定应用规范、定义接口和数据交互协议等。并尽量将应用的复杂度控制在一个可以接受的水平，从而在快速的支撑业务发展的同时，在保证系统的可用性和可维护性的同时，确保应用满足非功能属性要求（性能、安全、稳定性等）。</p><p><strong>分布式系统架构</strong>：分布式系统基本是稍具规模业务的必选项。它需要解决服务器负载，分布式服务的注册和发现，消息系统，缓存系统，分布式数据库等问题，同时架构师要在CAP（Consistency，Availability，Partition tolerance）之间进行权衡。</p><p><strong>数据架构</strong>：对于规模大一些的公司，数据治理是一个很重要的课题。如何对数据收集、数据处理提供统一的服务和标准，是数据架构需要关注的问题。其目的就是统一数据定义规范，标准化数据表达，形成有效易维护的数据资产，搭建统一的大数据处理平台，形成数据使用闭环。</p><p><strong>物理架构</strong>：物理架构关注软件元件是如何放到硬件上的，包括机房搭建、网络拓扑结构，网络分流器、代理服务器、Web服务器、应用服务器、报表服务器、整合服务器、存储服务器和主机等。</p><p><strong>运维架构</strong>：负责运维系统的规划、选型、部署上线，建立规范化的运维体系。</p><h2 id="典型应用架构" tabindex="-1">典型应用架构 <a class="header-anchor" href="#典型应用架构" aria-label="Permalink to &quot;典型应用架构&quot;">​</a></h2><h3 id="分层架构" tabindex="-1">分层架构 <a class="header-anchor" href="#分层架构" aria-label="Permalink to &quot;分层架构&quot;">​</a></h3><p>分层是一种常见的根据系统中的角色（职责拆分）和组织代码单元的常规实践。常见的分层结构如下图所示：</p><p><img src="'+r+'" alt="图片"></p><h3 id="cqrs" tabindex="-1">CQRS <a class="header-anchor" href="#cqrs" aria-label="Permalink to &quot;CQRS&quot;">​</a></h3><p>CQS(Command Query Separation，命令查询分离)最早来自于Betrand Meyer（Eiffel语言之父，OCP提出者）提出的概念。其基本思想在于，任何一个对象的方法可以分为两大类：</p><ul><li>命令(Command):不返回任何结果(void)，但会改变对象的状态。</li><li>查询(Query):返回结果，但是不会改变对象的状态，对系统没有副作用。</li></ul><p><img src="'+s+'" alt="图片"></p><h3 id="六边形架构" tabindex="-1">六边形架构 <a class="header-anchor" href="#六边形架构" aria-label="Permalink to &quot;六边形架构&quot;">​</a></h3><p>六边形架构是Alistair Cockburn在2005年提出，解决了传统的分层架构所带来的问题，实际上它也是一种分层架构，只不过不是上下，而是变成了内部和外部（如下图所示）。</p><p><img src="'+i+'" alt="图片"></p><p>六边形架构又称为端口-适配器架构，这个名字更容器理解。六边形架构将系统分为内部（内部六边形)和外部，内部代表了应用的业务逻辑，外部代表应用的驱动逻辑、基础设施或其他应用。</p><p>适配器分为两种类型（如下图所示），左侧代表 UI 的适配器被称为<strong>主动适配器（Driving Adapters）</strong>，因为是它们发起了对应用的一些操作。而右侧表示和后端工具链接的适配器，被称为<strong>被动适配器（Driven Adapters）</strong>，因为它们只会对主适配器的操作作出响应。</p><p><img src="'+p+'" alt="图片"></p><h3 id="洋葱圈架构" tabindex="-1">洋葱圈架构 <a class="header-anchor" href="#洋葱圈架构" aria-label="Permalink to &quot;洋葱圈架构&quot;">​</a></h3><p>洋葱架构与六边形架构有着相同的思路，它们都通过编写适配器代码将应用核心从对基础设施的关注中解放出来，避免基础设施代码渗透到应用核心之中。这样应用使用的工具和传达机制都可以轻松地替换，可以一定程度地避免技术、工具或者供应商锁定。</p><p>不同的是洋葱架构还告诉我们，企业应用中存在着不止两个层次，它在业务逻辑中加入了一些在领域驱动设计的过程中被识别出来的层次（Application，Domain Service，Domain model，Infrastructure等）</p><p>另外，它还有着脱离真实基础设施和传达机制应用仍然可以运行的便利，这样可以使用 mock 代替它们方便测试。</p><p><img src="'+l+'" alt="图片"></p><p>在洋葱架构中，明确规定了依赖的方向：</p><ul><li>外层依赖内层；</li><li>内层对外层无感知。</li></ul><h2 id="cola应用架构" tabindex="-1">COLA应用架构 <a class="header-anchor" href="#cola应用架构" aria-label="Permalink to &quot;COLA应用架构&quot;">​</a></h2><p>COLA架构是我团队自主研发的应用架构，目前已经开源（ <a href="https://github.com/alibaba/COLA" target="_blank" rel="noreferrer">https://github.com/alibaba/COLA</a> ）。在COLA的设计中，我们充分汲取了经典架构的优秀思想。除此之外，我们补充了规范设计和扩展设计，并且使用Archetype的方式，将架构固化下来，以便可以快速的在开发中使用。</p><h3 id="分层设计" tabindex="-1">分层设计 <a class="header-anchor" href="#分层设计" aria-label="Permalink to &quot;分层设计&quot;">​</a></h3><p>COLA的分层是一种改良了的三层架构。主要是将传统的业务逻辑层拆分成应用层、领域层和基础实施层。如下图所示，左边是传统的分层架构，右边是COLA的分层架构。</p><p><img src="'+c+'" alt="图片"></p><p>其每一层的作用范围和含义如下：1）展现层（Presentation Layer）：负责以Rest的格式接受Web请求，然后将请求路由给Application层执行，并返回视图模型（View Model），其载体通常是DTO（Data Transfer Object)；</p><p>2）应用层（Application Layer）：主要负责获取输入，组装上下文，做输入校验，调用领域层做业务处理，如果需要的话，发送消息通知。当然，层次是开放的，若有需要，应用层也可以直接访问基础实施层；</p><p>3）领域层（Domain Layer）：主要是封装了核心业务逻辑，并通过领域服务（Domain Service）和领域对象（Entities）的函数对外部提供业务逻辑的计算和处理；</p><p>4）基础实施层（Infrastructure Layer）主要包含Tunnel（数据通道）、Config和Common。这里我们使用Tunnel这个概念来对所有的数据来源进行抽象，这些数据来源可以是数据库（MySQL，NoSql）、搜索引擎、文件系统、也可以是SOA服务等；Config负责应用的配置；Common是通用的工具类。</p><h3 id="扩展设计" tabindex="-1">扩展设计 <a class="header-anchor" href="#扩展设计" aria-label="Permalink to &quot;扩展设计&quot;">​</a></h3><p>对于只有一个业务的简单场景，对扩展性的要求并不突出，这也是为什么扩展设计常被忽略的原因，因为我们大部分的系统都是从单一业务开始的。但是随着业务场景越来越复杂，代码里面开始出现大量的if-else逻辑。此时除了常规的策略模式以外，我们可以考虑在架构层面提供统一的扩展解决方案。</p><p>在扩展设计中，我们提炼出两个重要的概念，一个是<strong>业务身份</strong>，另一个是<strong>扩展点</strong>。</p><p><strong>业务身份是指业务在系统唯一标识一个业务或者一个场景的标志</strong>。在具体实现中，我们使用BizCode来表示业务身份，其中BizCode采用类似Java包名命名空间的方式。例如，我们可以用“ali.tmall”表示阿里天猫业务，用“ali.tmall.car” 表示阿里天猫的汽车业务，而用&quot;ali.tmall.car.aftermarket&quot;代表这是阿里天猫的汽车业务的后市场场景。</p><p><strong>每个业务或者场景都可以实现一个或多个扩展点（ExtensionPoint）</strong>，也就是说一个业务身份加上一个扩展点，可以唯一地确定一个扩展实现（Extension）。而这个业务身份和扩展点的组合，我们将其称之为扩展坐标（ExtensionCoordinate），如下图所示。</p><p><img src="'+m+'" alt="图片"></p><p>这样，通过业务身份+扩展点，我们就可以从框架层面实现对不同租户，不同业务，不同场景的扩展定制了。整个阿里业务中台正是基于这个思想，实现的多业务支撑的。</p><h3 id="规范设计" tabindex="-1">规范设计 <a class="header-anchor" href="#规范设计" aria-label="Permalink to &quot;规范设计&quot;">​</a></h3><p>任何事物都是规则性和随机性的组合。规范的意义就在于我们可以将规则性的东西固化下来，尽量减少随心所欲带来的复杂度，一致性可以降低系统复杂度。从命名到架构皆是如此，而架构本身就是一种规范和约束，破坏这个约束，也就破坏了架构。</p><p>COLA制定了一些列的规范：包括组件（Module）结构、包（Package）结构、命名等。</p><p>比如对于组件，我们要求使用COLA的应用都应该遵循如下图所示的组件划分：</p><p><img src="'+d+'" alt="图片"></p><h3 id="cola架构总览" tabindex="-1">COLA架构总览 <a class="header-anchor" href="#cola架构总览" aria-label="Permalink to &quot;COLA架构总览&quot;">​</a></h3><p>在架构思想上，COLA主张像六边形架构那样，使用端口-适配器去解耦技术细节；主张像洋葱圈架构那样，以领域为核心，并通过依赖倒置反转领域层的依赖方向。最终形成如下图所示的组件关系。</p><p><img src="'+h+'" alt="图片"></p><p>换一个视角，从COLA应用处理响应一个请求的过程来看。COLA使用了CQRS来分离命令和查询的职责，使用扩展点和元数据来提升应用的扩展性。整个处理流程如下图所示：</p><p><img src="'+g+'" alt="图片"></p><h2 id="应用架构的核心" tabindex="-1">应用架构的核心 <a class="header-anchor" href="#应用架构的核心" aria-label="Permalink to &quot;应用架构的核心&quot;">​</a></h2><p>纵观上面介绍的所有应用架构，我们可以发现一个共同点，就是“<strong>核心业务逻辑和技术细节分离</strong>”。</p><p><img src="'+u+'" alt="图片"></p><p>是的，六边形架构、洋葱圈架构、以及COLA架构的核心职责就是要做核心业务逻辑和技术细节的分离和解耦。</p><p>试想一下，业务逻辑和技术细节糅杂在一起的情况：所有的代码都写在ServiceImpl里面，前几行代码是做validation的事，接下来几行是做convert的事，然后是几行业务处理逻辑的代码，穿插着，我们需要通过RPC或者DAO获取更多的数据，拿到数据后，又是几行convert的代码，在接上一段业务逻辑代码，然后还要落库，发消息.....等等。</p><p>再简单的业务，按照上面这种写代码的方式，都会变得复杂，难维护。</p><p>因此，我认为<strong>应用架构的核心使命就是要分离业务逻辑和技术细节</strong>。让核心业务逻辑可以反映领域模型和领域应用，可以复用，可以很容易被看懂。让技术细节在辅助实现业务功能的同时，可以被替换。</p><p>最后我们发现，应用架构的道就是：“<strong>让上帝的归上帝，凯撒的归凯撒</strong>。”</p>',83),f=[b];function k(C,q,P,A,L,D){return a(),e("div",null,f)}const U=t(_,[["render",k]]);export{O as __pageData,U as default};
