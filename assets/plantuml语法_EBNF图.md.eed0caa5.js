import{_ as p,g as e,o as t,h as r,j as a,b as o,Q as l,p as s}from"./chunks/framework.79314373.js";const c="/assets/EBNF-1.15a4935f.svg",E="/assets/EBNF-2.504a82de.svg",y="/assets/EBNF-3.e30fdc9c.svg",i="/assets/EBNF-4.4ea15a2d.svg",u="/assets/EBNF-5.4e69f046.svg",F="/assets/EBNF-6.2de26ccb.svg",q="/assets/EBNF-7.2170967b.svg",m="/assets/EBNF-8.50971ff1.svg",d="/assets/EBNF-9.ee9d9e8c.svg",b="/assets/EBNF-10.9caac355.svg",A="/assets/EBNF-11.3a7c3035.svg",C="/assets/EBNF-12.b8b9629b.svg",D="/assets/EBNF-13.dbd2ef30.svg",h="/assets/EBNF-14.30c4e405.svg",f="/assets/EBNF-15.11d8ec4a.svg",B="/assets/EBNF-16.02c5f734.svg",_="/assets/EBNF-17.da475524.svg",T="/assets/EBNF-18.3097142a.svg",g="/assets/EBNF-19.05031bd4.svg",I="/assets/EBNF-20.a7737cea.svg",x="/assets/EBNF-21.545d66d4.svg",S="/assets/EBNF-22.101b1b9d.svg",v="/assets/EBNF-23.1ff7fad8.svg",N="/assets/EBNF图.d7cce86e.svg",Ms=JSON.parse('{"title":"EBNF图 | PlantUml","description":"","frontmatter":{"title":"EBNF图","head":[["meta",{"name":"keywords","content":"EBNF图 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | UML中国 | UML ｜ PlantUML ｜不止极客,nogeek,educode,教育编程,编程教育|Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://umlcn.com"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"og:title","content":"EBNF图 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"og:description","content":"EBNF图 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:site","content":"https://umlcn.com"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"EBNF图 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客"}],["meta",{"name":"twitter:description","content":"EBNF图 | PlantUml | PlantUml | UMLCn ｜ 软件方法 | NoGeek ｜不止极客 | 始于极客，不止极客｜educode｜educode.cn|nogeek|nogeek.cn｜CTO|架构师｜后端组长｜创业者｜高并发｜高性能｜高可用|技术合伙人｜架构咨询"}],["meta",{"name":"twitter:image","content":"https://umlcn.com/UmlCn-og.png"}],["meta",{"name":"baidu-site-verification","content":"codeva-E8fDj2NXib"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"plantuml语法/EBNF图.md","filePath":"plantuml语法/EBNF图.md","lastUpdated":1737644799000}'),P={name:"plantuml语法/EBNF图.md"},k=l(`<p><a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form" target="_blank" rel="noreferrer">Extended Backus-Naur Form (EBNF)</a>是一种形式化的语法，用于指定编程语言或其他形式化语言的结构。它是Backus-Naur形式（BNF）的扩展，最初由John Backus和Peter Naur开发，用于描述Algol编程语言的语法。</p><p>EBNF在原来的BNF元符号的基础上增加了几个额外的元符号，这使得语言的语法规范更加简洁和易读。它常用于编程语言的规范，有时也用于描述其他类型的形式语言的语法，如数据库查询语言或标记语言。</p><p>在PlantUML中已经引入了对<a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form" target="_blank" rel="noreferrer">EBNF</a>的基本支持。</p><h2 id="minimal-binary-diagram" tabindex="-1">Minimal binary diagram <a class="header-anchor" href="#minimal-binary-diagram" aria-label="Permalink to &quot;Minimal binary diagram&quot;">​</a></h2><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">binaryDigit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">binaryDigit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>图片：</p>`,6),L=s("p",null,[s("img",{src:c,alt:"Minimal binary diagram"})],-1),M=l(`<h2 id="all-ebnf-elements" tabindex="-1">All EBNF Elements <a class="header-anchor" href="#all-ebnf-elements" aria-label="Permalink to &quot;All EBNF Elements&quot;">​</a></h2><p>EBNF elements handled by PlantUML are described below.</p><div class="language-plantuml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plantuml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title All </span><span style="color:#79B8FF;">EBNF</span><span style="color:#E1E4E8;"> elements managed by PlantUML</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Nodes </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">litteral </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">special </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Edges </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">required </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [a];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, {a};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_ebnf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more_with_separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [a, {</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, a}];</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, {</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, a};</span></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more_with_terminator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_terminator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_terminator_ebnf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">alternative </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> b) , c;</span></span>
<span class="line"><span style="color:#E1E4E8;">without_group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> b , c;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title All </span><span style="color:#005CC5;">EBNF</span><span style="color:#24292E;"> elements managed by PlantUML</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Nodes </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">litteral </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">special </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Edges </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">required </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zero_or_more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, {a};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_ebnf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zero_or_more_with_separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a, {</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, a}];</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, {</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, a};</span></span>
<span class="line"><span style="color:#24292E;">zero_or_more_with_terminator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_terminator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_terminator_ebnf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">alternative </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> b) , c;</span></span>
<span class="line"><span style="color:#24292E;">without_group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> b , c;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,3),w=s("p",null,[s("img",{src:E,alt:"All EBNF Elements"})],-1),V=l(`<h2 id="special-sequence-management-with-special-sequence-symbol" tabindex="-1">Special sequence management with <code>special-sequence-symbol &quot;?&quot;</code> <a class="header-anchor" href="#special-sequence-management-with-special-sequence-symbol" aria-label="Permalink to &quot;Special sequence management with \`special-sequence-symbol &quot;?&quot;\`&quot;">​</a></h2><p>You can manage special sequence with <code>special-sequence-symbol &quot;?&quot;</code>.</p><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Example from §</span><span style="color:#79B8FF;">8.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ISO</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">EBNF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">h</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tab </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">IS0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6429</span><span style="color:#E1E4E8;"> character Horizontal Tabulation </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">new-</span><span style="color:#E1E4E8;">line </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { ? IS0 </span><span style="color:#79B8FF;">6429</span><span style="color:#E1E4E8;"> character Carriage Return ? },</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">IS0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6429</span><span style="color:#E1E4E8;"> character Line Feed </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">{ ? IS0 </span><span style="color:#79B8FF;">6429</span><span style="color:#E1E4E8;"> character Carriage Return ? };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Other possible examples: </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">h</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tab </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">Unicode </span><span style="color:#79B8FF;">U</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0009</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">empty</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">special </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Example from §</span><span style="color:#005CC5;">8.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ISO</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">EBNF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">h</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">IS0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6429</span><span style="color:#24292E;"> character Horizontal Tabulation </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new-</span><span style="color:#24292E;">line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { ? IS0 </span><span style="color:#005CC5;">6429</span><span style="color:#24292E;"> character Carriage Return ? },</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">IS0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6429</span><span style="color:#24292E;"> character Line Feed </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">{ ? IS0 </span><span style="color:#005CC5;">6429</span><span style="color:#24292E;"> character Carriage Return ? };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Other possible examples: </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">h</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">Unicode </span><span style="color:#005CC5;">U</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">0009</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">empty</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">special </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">??</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,3),U=s("p",null,[s("img",{src:y,alt:"Special sequence management"})],-1),R=l(`<h2 id="full-repetition-management-with-repetition-symbol" tabindex="-1">Full repetition management with <code>repetition-symbol &quot;*&quot;</code> <a class="header-anchor" href="#full-repetition-management-with-repetition-symbol" aria-label="Permalink to &quot;Full repetition management with \`repetition-symbol &quot;*&quot;\`&quot;">​</a></h2><p>You can manage repetition with <code>repetition-symbol &quot;*&quot;</code>.</p><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Simplified Fortran example </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Fortran_77_continuation_line </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&#39;[...]&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> [character];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Minimal test </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Example </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> §</span><span style="color:#79B8FF;">5.7</span><span style="color:#E1E4E8;"> Syntactic</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">factor </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ISO</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EBNF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">aa </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> aa, </span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">cc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> [aa], </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">dd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {aa}, </span><span style="color:#9ECBFF;">&quot;D&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ee </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aa, {aa}, </span><span style="color:#9ECBFF;">&quot;E&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> aa, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> [aa], </span><span style="color:#9ECBFF;">&quot;F&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">gg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> {aa}, </span><span style="color:#9ECBFF;">&quot;D&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Simplified Fortran example </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Fortran_77_continuation_line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&#39;[...]&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">66</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> [character];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Minimal test </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Example </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> §</span><span style="color:#005CC5;">5.7</span><span style="color:#24292E;"> Syntactic</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">factor </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ISO</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EBNF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">aa </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> aa, </span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">cc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> [aa], </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">dd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {aa}, </span><span style="color:#032F62;">&quot;D&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ee </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aa, {aa}, </span><span style="color:#032F62;">&quot;E&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> aa, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> [aa], </span><span style="color:#032F62;">&quot;F&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">gg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> {aa}, </span><span style="color:#032F62;">&quot;D&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,3),O=s("p",null,[s("img",{src:i,alt:"Full repetition management with"})],-1),z=l(`<h2 id="drawing-mode" tabindex="-1">Drawing mode <a class="header-anchor" href="#drawing-mode" aria-label="Permalink to &quot;Drawing mode&quot;">​</a></h2><p>You can choice the drawing mode, and having a compacted mode by using <code>!pragma compact</code> command.</p><h3 id="expanded-mode-by-default" tabindex="-1">Expanded mode <em>(by default)</em> <a class="header-anchor" href="#expanded-mode-by-default" aria-label="Permalink to &quot;Expanded mode *(by default)*&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title Expanded mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, {a};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_ebnf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more_with_separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [a, {</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, a}];</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, {</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, a};</span></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more_with_terminator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_terminator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title Expanded mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zero_or_more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, {a};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_ebnf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zero_or_more_with_separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a, {</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, a}];</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, {</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, a};</span></span>
<span class="line"><span style="color:#24292E;">zero_or_more_with_terminator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_terminator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,4),W=s("p",null,[s("img",{src:u,alt:"Expanded mode(by default)"})],-1),G=l(`<h3 id="compacted-mode" tabindex="-1">Compacted mode <a class="header-anchor" href="#compacted-mode" aria-label="Permalink to &quot;Compacted mode&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pragma compact</span></span>
<span class="line"><span style="color:#E1E4E8;">title Compacted mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, {a};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_ebnf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more_with_separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [a, {</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, a}];</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, {</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, a};</span></span>
<span class="line"><span style="color:#E1E4E8;">zero_or_more_with_terminator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">one_or_more_with_terminator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">, {a, </span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#24292E;">pragma compact</span></span>
<span class="line"><span style="color:#24292E;">title Compacted mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zero_or_more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, {a};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_ebnf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zero_or_more_with_separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a, {</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, a}];</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, {</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, a};</span></span>
<span class="line"><span style="color:#24292E;">zero_or_more_with_terminator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">one_or_more_with_terminator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, {a, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,2),J=s("p",null,[s("img",{src:F,alt:"Compacted mode"})],-1),H=l(`<h2 id="notes-on-elements" tabindex="-1">Notes on Elements <a class="header-anchor" href="#notes-on-elements" aria-label="Permalink to &quot;Notes on Elements&quot;">​</a></h2><p>Notes may be added to elements of your diagram by using EBNF comment tags.</p><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title Comments</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Notes for Rule1 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Rule1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;a-z&quot;</span><span style="color:#E1E4E8;"> (* </span><span style="color:#FFAB70;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">letter</span><span style="color:#E1E4E8;"> *) };</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Notes for Rule2 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Rule2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Additional notes and references </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title Comments</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Notes for Rule1 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Rule1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;a-z&quot;</span><span style="color:#24292E;"> (* </span><span style="color:#E36209;">any</span><span style="color:#24292E;"> </span><span style="color:#E36209;">letter</span><span style="color:#24292E;"> *) };</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Notes for Rule2 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Rule2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Additional notes and references </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,3),Y=s("p",null,[s("img",{src:q,alt:"Notes on Elements"})],-1),j=l(`<h2 id="using-global-style" tabindex="-1">Using (global) style <a class="header-anchor" href="#using-global-style" aria-label="Permalink to &quot;Using (global) style&quot;">​</a></h2><h3 id="without-style-by-default" tabindex="-1">Without style <em>(by default)</em> <a class="header-anchor" href="#without-style-by-default" aria-label="Permalink to &quot;Without style *(by default)*&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title Title</span></span>
<span class="line"><span style="color:#E1E4E8;">not_styled_ebnf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, c , </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;"> (* </span><span style="color:#FFAB70;">Note</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> *)}</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> special </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;repetition&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Global End Note </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title Title</span></span>
<span class="line"><span style="color:#24292E;">not_styled_ebnf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, c , </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;"> (* </span><span style="color:#E36209;">Note</span><span style="color:#24292E;"> </span><span style="color:#E36209;">on</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> *)}</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> special </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;repetition&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Global End Note </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,3),Q=s("p",null,[s("img",{src:m,alt:"Without style"})],-1),Z=l(`<h3 id="with-style" tabindex="-1">With style <a class="header-anchor" href="#with-style" aria-label="Permalink to &quot;With style&quot;">​</a></h3><p>You can use <a href="https://plantuml.com/zh/style-evolution" target="_blank" rel="noreferrer">style</a> to change rendering of elements.</p><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">element {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ebnf {</span></span>
<span class="line"><span style="color:#E1E4E8;">    LineColor blue</span></span>
<span class="line"><span style="color:#E1E4E8;">    Fontcolor green</span></span>
<span class="line"><span style="color:#E1E4E8;">    Backgroundcolor palegreen</span></span>
<span class="line"><span style="color:#E1E4E8;">    note {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Backgroundcolor pink</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">title Title</span></span>
<span class="line"><span style="color:#E1E4E8;">styled_ebnf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, c , </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;"> (* </span><span style="color:#FFAB70;">Note</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> *)}</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> special </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;repetition&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Global End Note </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">element {</span></span>
<span class="line"><span style="color:#24292E;">  ebnf {</span></span>
<span class="line"><span style="color:#24292E;">    LineColor blue</span></span>
<span class="line"><span style="color:#24292E;">    Fontcolor green</span></span>
<span class="line"><span style="color:#24292E;">    Backgroundcolor palegreen</span></span>
<span class="line"><span style="color:#24292E;">    note {</span></span>
<span class="line"><span style="color:#24292E;">      Backgroundcolor pink</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">title Title</span></span>
<span class="line"><span style="color:#24292E;">styled_ebnf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, c , </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;"> (* </span><span style="color:#E36209;">Note</span><span style="color:#24292E;"> </span><span style="color:#E36209;">on</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> *)}</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> special </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;repetition&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Global End Note </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,3),$=s("p",null,[s("img",{src:d,alt:"With style"})],-1),K=l(`<h2 id="example-of-lisp-grammar" tabindex="-1">Example of LISP Grammar <a class="header-anchor" href="#example-of-lisp-grammar" aria-label="Permalink to &quot;Example of LISP Grammar&quot;">​</a></h2><p>LISP Grammar with PlantUML.</p><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title </span><span style="color:#79B8FF;">LISP</span><span style="color:#E1E4E8;"> Grammar</span></span>
<span class="line"><span style="color:#E1E4E8;">grammars_expression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> atomic_symbol </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, s_expression, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, s_expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> list;</span></span>
<span class="line"><span style="color:#E1E4E8;">list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, s_expression, { s_expression }, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">atomic_symbol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> letter, atom_part;</span></span>
<span class="line"><span style="color:#E1E4E8;">atom_part </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> empty </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> letter, atom_part </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> number, atom_part;</span></span>
<span class="line"><span style="color:#E1E4E8;">letter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">z </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">number </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">empty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title </span><span style="color:#005CC5;">LISP</span><span style="color:#24292E;"> Grammar</span></span>
<span class="line"><span style="color:#24292E;">grammars_expression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> atomic_symbol </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, s_expression, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, s_expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> list;</span></span>
<span class="line"><span style="color:#24292E;">list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, s_expression, { s_expression }, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">atomic_symbol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> letter, atom_part;</span></span>
<span class="line"><span style="color:#24292E;">atom_part </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> empty </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> letter, atom_part </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> number, atom_part;</span></span>
<span class="line"><span style="color:#24292E;">letter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">z </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">empty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,3),X=s("p",null,[s("img",{src:b,alt:"LISP Grammar with PlantUML"})],-1),ss=l(`<h2 id="ebnf-of-plantumls-ebnf-grammar" tabindex="-1">EBNF of PlantUMLs EBNF Grammar <a class="header-anchor" href="#ebnf-of-plantumls-ebnf-grammar" aria-label="Permalink to &quot;EBNF of PlantUMLs EBNF Grammar&quot;">​</a></h2><p>EBNF allows for self description, so here it is!</p><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">grammar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { rule };</span></span>
<span class="line"><span style="color:#E1E4E8;">rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lhs , </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> definition </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) , rhs , </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> termination </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">lhs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier ;</span></span>
<span class="line"><span style="color:#E1E4E8;">rhs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> terminal</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#B392F0;">rhs</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> optional </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) , </span><span style="color:#9ECBFF;">&quot;]&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#B392F0;">rhs</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> repetition </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#B392F0;">rhs</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> grouping </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) , </span><span style="color:#9ECBFF;">&quot;)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(*&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> comment </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) , </span><span style="color:#9ECBFF;">&quot;*)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#B392F0;">rhs</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> special sequence, aka notation </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) , </span><span style="color:#9ECBFF;">&quot;?&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> rhs , </span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> alternation </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) , rhs</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> rhs , </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> concatenation </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">), rhs ;</span></span>
<span class="line"><span style="color:#E1E4E8;">identifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> letter , { letter | digit | </span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#E1E4E8;"> } ;</span></span>
<span class="line"><span style="color:#E1E4E8;">terminal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;"> , character , { character } , </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;&#39;</span><span style="color:#E1E4E8;"> , character , { character } , </span><span style="color:#9ECBFF;">&#39;&quot;&#39;</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">character </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> letter </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> digit </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> symbol </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">symbol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">digit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">letter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Z</span><span style="color:#E1E4E8;"> or a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">z </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">grammar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { rule };</span></span>
<span class="line"><span style="color:#24292E;">rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lhs , </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> definition </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) , rhs , </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> termination </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lhs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> identifier ;</span></span>
<span class="line"><span style="color:#24292E;">rhs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> identifier</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> terminal</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> , </span><span style="color:#6F42C1;">rhs</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> optional </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) , </span><span style="color:#032F62;">&quot;]&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;"> , </span><span style="color:#6F42C1;">rhs</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> repetition </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;}&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> , </span><span style="color:#6F42C1;">rhs</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> grouping </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) , </span><span style="color:#032F62;">&quot;)&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(*&quot;</span><span style="color:#24292E;"> , </span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> comment </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) , </span><span style="color:#032F62;">&quot;*)&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#24292E;"> , </span><span style="color:#6F42C1;">rhs</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> special sequence, aka notation </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) , </span><span style="color:#032F62;">&quot;?&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> rhs , </span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> alternation </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) , rhs</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> rhs , </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> concatenation </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">), rhs ;</span></span>
<span class="line"><span style="color:#24292E;">identifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> letter , { letter | digit | </span><span style="color:#032F62;">&quot;_&quot;</span><span style="color:#24292E;"> } ;</span></span>
<span class="line"><span style="color:#24292E;">terminal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;"> , character , { character } , </span><span style="color:#032F62;">&quot;&#39;&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;&#39;</span><span style="color:#24292E;"> , character , { character } , </span><span style="color:#032F62;">&#39;&quot;&#39;</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">character </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> letter </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> digit </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> symbol </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_&quot;</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">symbol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&gt;&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">digit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">letter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Z</span><span style="color:#24292E;"> or a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">z </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,3),ns=s("p",null,[s("img",{src:A,alt:"EBNF of PlantUMLs EBNF Grammar"})],-1),as=l(`<h2 id="java-language-specification" tabindex="-1">Java Language Specification <a class="header-anchor" href="#java-language-specification" aria-label="Permalink to &quot;Java Language Specification&quot;">​</a></h2><p>A real world example of a detailed programming language.</p><h3 id="packages-and-modules" tabindex="-1">Packages and Modules <a class="header-anchor" href="#packages-and-modules" aria-label="Permalink to &quot;Packages and Modules&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">CompilationUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OrdinaryCompilationUnit </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ModularCompilationUnit;</span></span>
<span class="line"><span style="color:#E1E4E8;">OrdinaryCompilationUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [PackageDeclaration], {ImportDeclaration}, {TopLevelClassOrInterfaceDeclaration};</span></span>
<span class="line"><span style="color:#E1E4E8;">ModularCompilationUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {ImportDeclaration}, ModuleDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">PackageDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {PackageModifier}, </span><span style="color:#9ECBFF;">&quot;package&quot;</span><span style="color:#E1E4E8;">, Identifier, {Identifier}, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">PackageModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation;</span></span>
<span class="line"><span style="color:#E1E4E8;">ImportDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">S</span></span>
<span class="line"><span style="color:#E1E4E8;">ingleTypeImportDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TypeImportOnDemandDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> SingleStaticImportDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> StaticImportOnDemandDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">SingleTypeImportDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeImportOnDemandDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#E1E4E8;">, PackageOrTypeName, </span><span style="color:#9ECBFF;">&quot;.*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">SingleStaticImportDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">StaticImportOnDemandDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;import&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;.*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">TopLevelClassOrInterfaceDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ClassDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InterfaceDeclaration), </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ModuleDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, [open], </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">, Identifier, {Identifier}, </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, {ModuleDirective} </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ModuleDirective </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;requires&quot;</span><span style="color:#E1E4E8;">, {RequiresModifier}, ModuleName, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">, PackageName, [</span><span style="color:#9ECBFF;">&quot;to&quot;</span><span style="color:#E1E4E8;">, ModuleName {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> ModuleName}], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">) | (</span><span style="color:#9ECBFF;">&quot;opens&quot;</span><span style="color:#E1E4E8;">, PackageName, [</span><span style="color:#9ECBFF;">&quot;to&quot;</span><span style="color:#E1E4E8;"> ModuleName {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> ModuleName}], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">) | (</span><span style="color:#9ECBFF;">&quot;uses&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">) | (</span><span style="color:#9ECBFF;">&quot;provides&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;with&quot;</span><span style="color:#E1E4E8;">, TypeName {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> TypeName}, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">RequiresModifier = </span><span style="color:#9ECBFF;">&quot;transitive&quot;</span><span style="color:#E1E4E8;"> | </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">CompilationUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OrdinaryCompilationUnit </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ModularCompilationUnit;</span></span>
<span class="line"><span style="color:#24292E;">OrdinaryCompilationUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [PackageDeclaration], {ImportDeclaration}, {TopLevelClassOrInterfaceDeclaration};</span></span>
<span class="line"><span style="color:#24292E;">ModularCompilationUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {ImportDeclaration}, ModuleDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">PackageDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {PackageModifier}, </span><span style="color:#032F62;">&quot;package&quot;</span><span style="color:#24292E;">, Identifier, {Identifier}, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">PackageModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation;</span></span>
<span class="line"><span style="color:#24292E;">ImportDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">S</span></span>
<span class="line"><span style="color:#24292E;">ingleTypeImportDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TypeImportOnDemandDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> SingleStaticImportDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> StaticImportOnDemandDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">SingleTypeImportDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;import&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">TypeImportOnDemandDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;import&quot;</span><span style="color:#24292E;">, PackageOrTypeName, </span><span style="color:#032F62;">&quot;.*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">SingleStaticImportDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;import&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">StaticImportOnDemandDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;import&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;.*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">TopLevelClassOrInterfaceDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ClassDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InterfaceDeclaration), </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ModuleDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, [open], </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">, Identifier, {Identifier}, </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, {ModuleDirective} </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ModuleDirective </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;requires&quot;</span><span style="color:#24292E;">, {RequiresModifier}, ModuleName, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, PackageName, [</span><span style="color:#032F62;">&quot;to&quot;</span><span style="color:#24292E;">, ModuleName {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> ModuleName}], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">) | (</span><span style="color:#032F62;">&quot;opens&quot;</span><span style="color:#24292E;">, PackageName, [</span><span style="color:#032F62;">&quot;to&quot;</span><span style="color:#24292E;"> ModuleName {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> ModuleName}], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">) | (</span><span style="color:#032F62;">&quot;uses&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">) | (</span><span style="color:#032F62;">&quot;provides&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;with&quot;</span><span style="color:#24292E;">, TypeName {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> TypeName}, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">RequiresModifier = </span><span style="color:#032F62;">&quot;transitive&quot;</span><span style="color:#24292E;"> | </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,4),os=s("p",null,[s("img",{src:C,alt:"Packages and Modules"})],-1),ls=l(`<h3 id="lexical-structure" tabindex="-1">Lexical Structure <a class="header-anchor" href="#lexical-structure" aria-label="Permalink to &quot;Lexical Structure&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">Identifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">IdentifierChars but not a ReservedKeyword or BooleanLiteral or NullLiteral</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">IdentifierChars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JavaLetter, {JavaLetterOrDigit};</span></span>
<span class="line"><span style="color:#E1E4E8;">JavaLetter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> any Unicode character that is a </span><span style="color:#9ECBFF;">&quot;Java letter&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">JavaLetterOrDigit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> any Unicode character that is a </span><span style="color:#9ECBFF;">&quot;Java letter-or-digit&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeIdentifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Identifier but not permits, record, sealed, var, or </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnqualifiedMethodIdentifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Identifier but not </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Literal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IntegerLiteral </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> FloatingPointLiteral </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> BooleanLiteral </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> CharacterLiteral </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> StringLiteral </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TextBlock </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> NullLiteral;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">Identifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">IdentifierChars but not a ReservedKeyword or BooleanLiteral or NullLiteral</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">IdentifierChars </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JavaLetter, {JavaLetterOrDigit};</span></span>
<span class="line"><span style="color:#24292E;">JavaLetter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> any Unicode character that is a </span><span style="color:#032F62;">&quot;Java letter&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">JavaLetterOrDigit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> any Unicode character that is a </span><span style="color:#032F62;">&quot;Java letter-or-digit&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">TypeIdentifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Identifier but not permits, record, sealed, var, or </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">UnqualifiedMethodIdentifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Identifier but not </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Literal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IntegerLiteral </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> FloatingPointLiteral </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> BooleanLiteral </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> CharacterLiteral </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> StringLiteral </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TextBlock </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> NullLiteral;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,2),ps=s("p",null,[s("img",{src:D,alt:"Lexical Structure"})],-1),es=l(`<h3 id="types-values-and-variables" tabindex="-1">Types, Values, and Variables <a class="header-anchor" href="#types-values-and-variables" aria-label="Permalink to &quot;Types, Values, and Variables&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">Type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PrimitiveType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ReferenceType;</span></span>
<span class="line"><span style="color:#E1E4E8;">PrimitiveType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [Annotation], (NumericType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> boolean );</span></span>
<span class="line"><span style="color:#E1E4E8;">NumericType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IntegralType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> FloatingPointType;</span></span>
<span class="line"><span style="color:#E1E4E8;">IntegralType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;byte&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;short&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;long&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;char&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">FloatingPointType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;double&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ReferenceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassOrInterfaceType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TypeVariable </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ArrayType;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassOrInterfaceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InterfaceType;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, TypeIdentifier, [TypeArguments];</span></span>
<span class="line"><span style="color:#E1E4E8;">PackageName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, TypeIdentifier, [TypeArguments];</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassOrInterfaceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, TypeIdentifier, [TypeArguments];</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassType;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeVariable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, TypeIdentifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (PrimitiveType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassOrInterfaceType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TypeVariable), Dims;</span></span>
<span class="line"><span style="color:#E1E4E8;">Dims</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  {Annotation}, </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">, {{Annotation}, </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeParameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {TypeParameterModifier}, TypeIdentifier, [TypeBound];</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeParameterModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeBound </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">, TypeVariable) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;"> ClassOrInterfaceType {AdditionalBound});</span></span>
<span class="line"><span style="color:#E1E4E8;">AdditionalBound </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&amp;&quot;</span><span style="color:#E1E4E8;">, InterfaceType;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeArguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;&quot;</span><span style="color:#E1E4E8;">, TypeArgumentList, </span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeArgumentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeArgument {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, TypeArgument};</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeArgument </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReferenceType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Wildcard;</span></span>
<span class="line"><span style="color:#E1E4E8;">Wildcard </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, </span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#E1E4E8;">, [WildcardBounds];</span></span>
<span class="line"><span style="color:#E1E4E8;">WildcardBounds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;super&quot;</span><span style="color:#E1E4E8;">), ReferenceType;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">Type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PrimitiveType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ReferenceType;</span></span>
<span class="line"><span style="color:#24292E;">PrimitiveType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [Annotation], (NumericType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> boolean );</span></span>
<span class="line"><span style="color:#24292E;">NumericType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IntegralType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> FloatingPointType;</span></span>
<span class="line"><span style="color:#24292E;">IntegralType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;byte&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;short&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;long&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;char&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">FloatingPointType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;double&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ReferenceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassOrInterfaceType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TypeVariable </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ArrayType;</span></span>
<span class="line"><span style="color:#24292E;">ClassOrInterfaceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InterfaceType;</span></span>
<span class="line"><span style="color:#24292E;">ClassType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, TypeIdentifier, [TypeArguments];</span></span>
<span class="line"><span style="color:#24292E;">PackageName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, TypeIdentifier, [TypeArguments];</span></span>
<span class="line"><span style="color:#24292E;">ClassOrInterfaceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, TypeIdentifier, [TypeArguments];</span></span>
<span class="line"><span style="color:#24292E;">InterfaceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassType;</span></span>
<span class="line"><span style="color:#24292E;">TypeVariable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, TypeIdentifier;</span></span>
<span class="line"><span style="color:#24292E;">ArrayType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (PrimitiveType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassOrInterfaceType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TypeVariable), Dims;</span></span>
<span class="line"><span style="color:#24292E;">Dims</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  {Annotation}, </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">, {{Annotation}, </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">TypeParameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {TypeParameterModifier}, TypeIdentifier, [TypeBound];</span></span>
<span class="line"><span style="color:#24292E;">TypeParameterModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation;</span></span>
<span class="line"><span style="color:#24292E;">TypeBound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">, TypeVariable) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;"> ClassOrInterfaceType {AdditionalBound});</span></span>
<span class="line"><span style="color:#24292E;">AdditionalBound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">, InterfaceType;</span></span>
<span class="line"><span style="color:#24292E;">TypeArguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;&quot;</span><span style="color:#24292E;">, TypeArgumentList, </span><span style="color:#032F62;">&quot;&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">TypeArgumentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeArgument {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, TypeArgument};</span></span>
<span class="line"><span style="color:#24292E;">TypeArgument </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReferenceType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Wildcard;</span></span>
<span class="line"><span style="color:#24292E;">Wildcard </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, </span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#24292E;">, [WildcardBounds];</span></span>
<span class="line"><span style="color:#24292E;">WildcardBounds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;super&quot;</span><span style="color:#24292E;">), ReferenceType;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,2),ts=s("p",null,[s("img",{src:h,alt:"Types, Values, and Variables"})],-1),rs=l(`<h3 id="names" tabindex="-1">Names <a class="header-anchor" href="#names" aria-label="Permalink to &quot;Names&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">ModuleName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ( ModuleName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">PackageName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (PackageName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeIdentifier </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (PackageOrTypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, TypeIdentifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">ExpressionName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ( AmbiguousName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnqualifiedMethodIdentifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">PackageOrTypeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (PackageOrTypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">AmbiguousName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (AmbiguousName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">ModuleName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ( ModuleName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier);</span></span>
<span class="line"><span style="color:#24292E;">PackageName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (PackageName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier);</span></span>
<span class="line"><span style="color:#24292E;">TypeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeIdentifier </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (PackageOrTypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, TypeIdentifier);</span></span>
<span class="line"><span style="color:#24292E;">ExpressionName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ( AmbiguousName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier);</span></span>
<span class="line"><span style="color:#24292E;">MethodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnqualifiedMethodIdentifier;</span></span>
<span class="line"><span style="color:#24292E;">PackageOrTypeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (PackageOrTypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier);</span></span>
<span class="line"><span style="color:#24292E;">AmbiguousName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (AmbiguousName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier);</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,2),cs=s("p",null,[s("img",{src:f,alt:"Names"})],-1),Es=l(`<h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NormalClassDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> EnumDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> RecordDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">NormalClassDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {ClassModifier}, </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">, TypeIdentifier, [TypeParameters], [ClassExtends], [ClassImplements], [ClassPermits], ClassBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;protected&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abstract&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;final&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sealed&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;non-sealed&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;strictfp&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeParameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;&quot;</span><span style="color:#E1E4E8;">, TypeParameterList, </span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeParameterList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeParameter, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, TypeParameter};</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassExtends </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">, ClassType;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassImplements </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;implements&quot;</span><span style="color:#E1E4E8;">, InterfaceTypeList;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceTypeList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InterfaceType, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, InterfaceType};</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassPermits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;permits&quot;</span><span style="color:#E1E4E8;">, TypeName, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, TypeName};</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, {ClassBodyDeclaration}, </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassBodyDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassMemberDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InstanceInitializer </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> StaticInitializer </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ConstructorDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassMemberDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (FieldDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MethodDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InterfaceDeclaration), </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">FieldDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {FieldModifier}, UnannType, VariableDeclaratorList, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">FieldModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;protected&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;final&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;transient&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;volatile&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableDeclaratorList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> VariableDeclarator, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, VariableDeclarator};</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableDeclarator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> VariableDeclaratorId, [</span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, VariableInitializer];</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableDeclaratorId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier, [Dims];</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Expression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ArrayInitializer;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannPrimitiveType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> UnannReferenceType;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannPrimitiveType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NumericType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> boolean;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannReferenceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannClassOrInterfaceType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> UnannTypeVariable </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> UnannArrayType;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannClassOrInterfaceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannClassType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> UnannInterfaceType;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannClassType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TypeIdentifier, [TypeArguments]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (PackageName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, {Annotation}, TypeIdentifier, [TypeArguments]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (UnannClassOrInterfaceType, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, {Annotation}, TypeIdentifier, [TypeArguments]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeIdentifier, [TypeArguments]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeIdentifier, [TypeArguments]);</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannInterfaceType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannClassType;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannTypeVariable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeIdentifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnannArrayType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (UnannPrimitiveType, Dims) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (UnannClassOrInterfaceType, Dims) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (UnannTypeVariable, Dims);</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {MethodModifier}, MethodHeader, MethodBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;protected&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abstract&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;final&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;synchronized&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;native&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;strictfp&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodHeader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Result, MethodDeclarator, [Throws]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeParameters, {Annotation}, Result, MethodDeclarator, [Throws]);</span></span>
<span class="line"><span style="color:#E1E4E8;">Result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;void&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodDeclarator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier, ( [ ReceiverParameter, </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> ], [FormalParameterList] ), [Dims];</span></span>
<span class="line"><span style="color:#E1E4E8;">ReceiverParameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, UnannType, [Identifier, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;this&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">FormalParameterList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FormalParameter, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, FormalParameter};</span></span>
<span class="line"><span style="color:#E1E4E8;">FormalParameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({VariableModifier}, UnannType, VariableDeclaratorId) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> VariableArityParameter;</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableArityParameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {VariableModifier}, UnannType, {Annotation}, </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">, Identifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;final&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Throws </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;throws&quot;</span><span style="color:#E1E4E8;">, ExceptionTypeList;</span></span>
<span class="line"><span style="color:#E1E4E8;">ExceptionTypeList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExceptionType, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, ExceptionType};</span></span>
<span class="line"><span style="color:#E1E4E8;">ExceptionType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TypeVariable;</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Block </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">InstanceInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Block;</span></span>
<span class="line"><span style="color:#E1E4E8;">StaticInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, Block;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstructorDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {ConstructorModifier}, ConstructorDeclarator, [Throws], ConstructorBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstructorModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;protected&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstructorDeclarator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [TypeParameters], SimpleTypeName, ( [ReceiverParameter, </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">], [FormalParameterList] );</span></span>
<span class="line"><span style="color:#E1E4E8;">SimpleTypeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeIdentifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstructorBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { [ExplicitConstructorInvocation], [BlockStatements] };</span></span>
<span class="line"><span style="color:#E1E4E8;">ExplicitConstructorInvocation = ( [TypeArguments], &quot;this&quot;, &quot;(&quot;, [ArgumentList], &quot;)&quot;, &quot;;&quot; ) | ([TypeArguments], &quot;super&quot;, &quot;(&quot;, [ArgumentList], &quot;)&quot;, &quot;;&quot; ) | (ExpressionName, &quot;.&quot;, [TypeArguments], &quot;super&quot;, &quot;(&quot;, [ArgumentList], &quot;)&quot;, &quot;;&quot; ) | (Primary, &quot;.&quot; [TypeArguments], &quot;super&quot;, &quot;(&quot; [ArgumentList], &quot;)&quot;, &quot;;&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">EnumDeclaration = {ClassModifier}, &quot;enum&quot;, TypeIdentifier, [ClassImplements], EnumBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">EnumBody = &quot;{&quot;, [EnumConstantList], [</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">], [EnumBodyDeclarations], &quot;}&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">EnumConstantList = EnumConstant, {&quot;,&quot;, EnumConstant};</span></span>
<span class="line"><span style="color:#E1E4E8;">EnumConstant = {EnumConstantModifier}, Identifier, [</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">], [ClassBody];</span></span>
<span class="line"><span style="color:#E1E4E8;">EnumConstantModifier = Annotation;</span></span>
<span class="line"><span style="color:#E1E4E8;">EnumBodyDeclarations = &quot;;&quot;, {ClassBodyDeclaration};</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordDeclaration = {ClassModifier}, &quot;record&quot;, TypeIdentifier, [TypeParameters], RecordHeader, [ClassImplements], RecordBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordHeader = &quot;(&quot;, [RecordComponentList], &quot;)&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordComponentList = RecordComponent, {&quot;,&quot;, RecordComponent};</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordComponent = (RecordComponentModifier}, UnannType, Identifier) | VariableArityRecordComponent;</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableArityRecordComponent = {RecordComponentModifier}, UnannType, {Annotation}, &quot;...&quot;, Identifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordComponentModifier = Annotation;</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordBody = &quot;{&quot;, {RecordBodyDeclaration}, &quot;}&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">RecordBodyDeclaration = ClassBodyDeclaration | CompactConstructorDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">CompactConstructorDeclaration = {ConstructorModifier}, SimpleTypeName, ConstructorBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">ClassDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NormalClassDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> EnumDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> RecordDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">NormalClassDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {ClassModifier}, </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">, TypeIdentifier, [TypeParameters], [ClassExtends], [ClassImplements], [ClassPermits], ClassBody;</span></span>
<span class="line"><span style="color:#24292E;">ClassModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;protected&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abstract&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;final&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sealed&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;non-sealed&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;strictfp&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">TypeParameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;&quot;</span><span style="color:#24292E;">, TypeParameterList, </span><span style="color:#032F62;">&quot;&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">TypeParameterList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeParameter, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, TypeParameter};</span></span>
<span class="line"><span style="color:#24292E;">ClassExtends </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">, ClassType;</span></span>
<span class="line"><span style="color:#24292E;">ClassImplements </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;implements&quot;</span><span style="color:#24292E;">, InterfaceTypeList;</span></span>
<span class="line"><span style="color:#24292E;">InterfaceTypeList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InterfaceType, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, InterfaceType};</span></span>
<span class="line"><span style="color:#24292E;">ClassPermits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;permits&quot;</span><span style="color:#24292E;">, TypeName, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, TypeName};</span></span>
<span class="line"><span style="color:#24292E;">ClassBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, {ClassBodyDeclaration}, </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ClassBodyDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassMemberDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InstanceInitializer </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> StaticInitializer </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ConstructorDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">ClassMemberDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (FieldDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MethodDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InterfaceDeclaration), </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">FieldDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {FieldModifier}, UnannType, VariableDeclaratorList, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">FieldModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;protected&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;final&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;transient&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;volatile&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">VariableDeclaratorList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VariableDeclarator, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, VariableDeclarator};</span></span>
<span class="line"><span style="color:#24292E;">VariableDeclarator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VariableDeclaratorId, [</span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, VariableInitializer];</span></span>
<span class="line"><span style="color:#24292E;">VariableDeclaratorId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier, [Dims];</span></span>
<span class="line"><span style="color:#24292E;">VariableInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Expression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ArrayInitializer;</span></span>
<span class="line"><span style="color:#24292E;">UnannType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannPrimitiveType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> UnannReferenceType;</span></span>
<span class="line"><span style="color:#24292E;">UnannPrimitiveType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NumericType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> boolean;</span></span>
<span class="line"><span style="color:#24292E;">UnannReferenceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannClassOrInterfaceType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> UnannTypeVariable </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> UnannArrayType;</span></span>
<span class="line"><span style="color:#24292E;">UnannClassOrInterfaceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannClassType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> UnannInterfaceType;</span></span>
<span class="line"><span style="color:#24292E;">UnannClassType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TypeIdentifier, [TypeArguments]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (PackageName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, {Annotation}, TypeIdentifier, [TypeArguments]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (UnannClassOrInterfaceType, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, {Annotation}, TypeIdentifier, [TypeArguments]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeIdentifier, [TypeArguments]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeIdentifier, [TypeArguments]);</span></span>
<span class="line"><span style="color:#24292E;">UnannInterfaceType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannClassType;</span></span>
<span class="line"><span style="color:#24292E;">UnannTypeVariable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeIdentifier;</span></span>
<span class="line"><span style="color:#24292E;">UnannArrayType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (UnannPrimitiveType, Dims) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (UnannClassOrInterfaceType, Dims) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (UnannTypeVariable, Dims);</span></span>
<span class="line"><span style="color:#24292E;">MethodDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {MethodModifier}, MethodHeader, MethodBody;</span></span>
<span class="line"><span style="color:#24292E;">MethodModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;protected&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abstract&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;final&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;synchronized&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;native&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;strictfp&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">MethodHeader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Result, MethodDeclarator, [Throws]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeParameters, {Annotation}, Result, MethodDeclarator, [Throws]);</span></span>
<span class="line"><span style="color:#24292E;">Result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;void&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">MethodDeclarator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier, ( [ ReceiverParameter, </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> ], [FormalParameterList] ), [Dims];</span></span>
<span class="line"><span style="color:#24292E;">ReceiverParameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, UnannType, [Identifier, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;this&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">FormalParameterList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FormalParameter, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, FormalParameter};</span></span>
<span class="line"><span style="color:#24292E;">FormalParameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({VariableModifier}, UnannType, VariableDeclaratorId) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> VariableArityParameter;</span></span>
<span class="line"><span style="color:#24292E;">VariableArityParameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {VariableModifier}, UnannType, {Annotation}, </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">, Identifier;</span></span>
<span class="line"><span style="color:#24292E;">VariableModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;final&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Throws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;throws&quot;</span><span style="color:#24292E;">, ExceptionTypeList;</span></span>
<span class="line"><span style="color:#24292E;">ExceptionTypeList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExceptionType, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, ExceptionType};</span></span>
<span class="line"><span style="color:#24292E;">ExceptionType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TypeVariable;</span></span>
<span class="line"><span style="color:#24292E;">MethodBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Block </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">InstanceInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Block;</span></span>
<span class="line"><span style="color:#24292E;">StaticInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, Block;</span></span>
<span class="line"><span style="color:#24292E;">ConstructorDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {ConstructorModifier}, ConstructorDeclarator, [Throws], ConstructorBody;</span></span>
<span class="line"><span style="color:#24292E;">ConstructorModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;protected&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ConstructorDeclarator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [TypeParameters], SimpleTypeName, ( [ReceiverParameter, </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">], [FormalParameterList] );</span></span>
<span class="line"><span style="color:#24292E;">SimpleTypeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeIdentifier;</span></span>
<span class="line"><span style="color:#24292E;">ConstructorBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { [ExplicitConstructorInvocation], [BlockStatements] };</span></span>
<span class="line"><span style="color:#24292E;">ExplicitConstructorInvocation = ( [TypeArguments], &quot;this&quot;, &quot;(&quot;, [ArgumentList], &quot;)&quot;, &quot;;&quot; ) | ([TypeArguments], &quot;super&quot;, &quot;(&quot;, [ArgumentList], &quot;)&quot;, &quot;;&quot; ) | (ExpressionName, &quot;.&quot;, [TypeArguments], &quot;super&quot;, &quot;(&quot;, [ArgumentList], &quot;)&quot;, &quot;;&quot; ) | (Primary, &quot;.&quot; [TypeArguments], &quot;super&quot;, &quot;(&quot; [ArgumentList], &quot;)&quot;, &quot;;&quot;;</span></span>
<span class="line"><span style="color:#24292E;">EnumDeclaration = {ClassModifier}, &quot;enum&quot;, TypeIdentifier, [ClassImplements], EnumBody;</span></span>
<span class="line"><span style="color:#24292E;">EnumBody = &quot;{&quot;, [EnumConstantList], [</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">], [EnumBodyDeclarations], &quot;}&quot;;</span></span>
<span class="line"><span style="color:#24292E;">EnumConstantList = EnumConstant, {&quot;,&quot;, EnumConstant};</span></span>
<span class="line"><span style="color:#24292E;">EnumConstant = {EnumConstantModifier}, Identifier, [</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">], [ClassBody];</span></span>
<span class="line"><span style="color:#24292E;">EnumConstantModifier = Annotation;</span></span>
<span class="line"><span style="color:#24292E;">EnumBodyDeclarations = &quot;;&quot;, {ClassBodyDeclaration};</span></span>
<span class="line"><span style="color:#24292E;">RecordDeclaration = {ClassModifier}, &quot;record&quot;, TypeIdentifier, [TypeParameters], RecordHeader, [ClassImplements], RecordBody;</span></span>
<span class="line"><span style="color:#24292E;">RecordHeader = &quot;(&quot;, [RecordComponentList], &quot;)&quot;;</span></span>
<span class="line"><span style="color:#24292E;">RecordComponentList = RecordComponent, {&quot;,&quot;, RecordComponent};</span></span>
<span class="line"><span style="color:#24292E;">RecordComponent = (RecordComponentModifier}, UnannType, Identifier) | VariableArityRecordComponent;</span></span>
<span class="line"><span style="color:#24292E;">VariableArityRecordComponent = {RecordComponentModifier}, UnannType, {Annotation}, &quot;...&quot;, Identifier;</span></span>
<span class="line"><span style="color:#24292E;">RecordComponentModifier = Annotation;</span></span>
<span class="line"><span style="color:#24292E;">RecordBody = &quot;{&quot;, {RecordBodyDeclaration}, &quot;}&quot;;</span></span>
<span class="line"><span style="color:#24292E;">RecordBodyDeclaration = ClassBodyDeclaration | CompactConstructorDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">CompactConstructorDeclaration = {ConstructorModifier}, SimpleTypeName, ConstructorBody;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div>`,2),ys=s("p",null,[s("img",{src:B,alt:"Classes"})],-1),is=l(`<h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NormalInterfaceDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> AnnotationInterfaceDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">NormalInterfaceDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {InterfaceModifier}, </span><span style="color:#9ECBFF;">&quot;interface&quot;</span><span style="color:#E1E4E8;">, TypeIdentifier, [TypeParameters], [InterfaceExtends], [InterfacePermits], InterfaceBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;protected&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abstract&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sealed&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;non-sealed&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;strictfp&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceExtends </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">, InterfaceTypeList;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfacePermits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;permits&quot;</span><span style="color:#E1E4E8;">, TypeName, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, TypeName};</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, {InterfaceMemberDeclaration}, </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceMemberDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConstantDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InterfaceMethodDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InterfaceDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstantDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {ConstantModifier}, UnannType, VariableDeclaratorList, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstantModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;final&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceMethodDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {InterfaceMethodModifier}, MethodHeader, MethodBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">InterfaceMethodModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abstract&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;strictfp&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">AnnotationInterfaceDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {InterfaceModifier}, </span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;interface&quot;</span><span style="color:#E1E4E8;">, TypeIdentifier, AnnotationInterfaceBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">AnnotationInterfaceBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, {AnnotationInterfaceMemberDeclaration}, </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">AnnotationInterfaceMemberDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AnnotationInterfaceElementDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ConstantDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> InterfaceDeclaration, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">AnnotationInterfaceElementDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {AnnotationInterfaceElementModifier}, UnannType, Identifier, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, [Dims], [DefaultValue], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">AnnotationInterfaceElementModifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Annotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abstract&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">DefaultValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">, ElementValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">Annotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NormalAnnotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MarkerAnnotation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> SingleElementAnnotation;</span></span>
<span class="line"><span style="color:#E1E4E8;">NormalAnnotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ElementValuePairList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ElementValuePairList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ElementValuePair, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, ElementValuePair};</span></span>
<span class="line"><span style="color:#E1E4E8;">ElementValuePair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, ElementValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">ElementValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConditionalExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ElementValueArrayInitializer </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Annotation;</span></span>
<span class="line"><span style="color:#E1E4E8;">ElementValueArrayInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, [ElementValueList], [</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ElementValueList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ElementValue, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, ElementValue};</span></span>
<span class="line"><span style="color:#E1E4E8;">MarkerAnnotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#E1E4E8;">, TypeName;</span></span>
<span class="line"><span style="color:#E1E4E8;">SingleElementAnnotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#E1E4E8;">, TypeName, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, ElementValue, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">InterfaceDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NormalInterfaceDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> AnnotationInterfaceDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">NormalInterfaceDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {InterfaceModifier}, </span><span style="color:#032F62;">&quot;interface&quot;</span><span style="color:#24292E;">, TypeIdentifier, [TypeParameters], [InterfaceExtends], [InterfacePermits], InterfaceBody;</span></span>
<span class="line"><span style="color:#24292E;">InterfaceModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;protected&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abstract&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sealed&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;non-sealed&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;strictfp&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">InterfaceExtends </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">, InterfaceTypeList;</span></span>
<span class="line"><span style="color:#24292E;">InterfacePermits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;permits&quot;</span><span style="color:#24292E;">, TypeName, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, TypeName};</span></span>
<span class="line"><span style="color:#24292E;">InterfaceBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, {InterfaceMemberDeclaration}, </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">InterfaceMemberDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConstantDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InterfaceMethodDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InterfaceDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ConstantDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {ConstantModifier}, UnannType, VariableDeclaratorList, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ConstantModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;final&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">InterfaceMethodDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {InterfaceMethodModifier}, MethodHeader, MethodBody;</span></span>
<span class="line"><span style="color:#24292E;">InterfaceMethodModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abstract&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;strictfp&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">AnnotationInterfaceDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {InterfaceModifier}, </span><span style="color:#032F62;">&quot;@&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;interface&quot;</span><span style="color:#24292E;">, TypeIdentifier, AnnotationInterfaceBody;</span></span>
<span class="line"><span style="color:#24292E;">AnnotationInterfaceBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, {AnnotationInterfaceMemberDeclaration}, </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">AnnotationInterfaceMemberDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AnnotationInterfaceElementDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ConstantDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> InterfaceDeclaration, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">AnnotationInterfaceElementDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {AnnotationInterfaceElementModifier}, UnannType, Identifier, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, [Dims], [DefaultValue], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">AnnotationInterfaceElementModifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Annotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abstract&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">DefaultValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">, ElementValue;</span></span>
<span class="line"><span style="color:#24292E;">Annotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NormalAnnotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MarkerAnnotation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> SingleElementAnnotation;</span></span>
<span class="line"><span style="color:#24292E;">NormalAnnotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ElementValuePairList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ElementValuePairList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ElementValuePair, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, ElementValuePair};</span></span>
<span class="line"><span style="color:#24292E;">ElementValuePair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, ElementValue;</span></span>
<span class="line"><span style="color:#24292E;">ElementValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConditionalExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ElementValueArrayInitializer </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Annotation;</span></span>
<span class="line"><span style="color:#24292E;">ElementValueArrayInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, [ElementValueList], [</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ElementValueList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ElementValue, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, ElementValue};</span></span>
<span class="line"><span style="color:#24292E;">MarkerAnnotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@&quot;</span><span style="color:#24292E;">, TypeName;</span></span>
<span class="line"><span style="color:#24292E;">SingleElementAnnotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@&quot;</span><span style="color:#24292E;">, TypeName, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, ElementValue, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,2),us=s("p",null,[s("img",{src:_,alt:"Interfaces"})],-1),Fs=l(`<h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, [VariableInitializerList], [</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">VariableInitializerList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> VariableInitializer, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, VariableInitializer};</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">ArrayInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, [VariableInitializerList], [</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">VariableInitializerList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VariableInitializer, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, VariableInitializer};</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,2),qs=s("p",null,[s("img",{src:T,alt:"Arrays"})],-1),ms=l(`<h3 id="blocks-statements-and-patterns" tabindex="-1">Blocks, Statements, and Patterns <a class="header-anchor" href="#blocks-statements-and-patterns" aria-label="Permalink to &quot;Blocks, Statements, and Patterns&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">Block </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, [BlockStatements], </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">BlockStatements </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BlockStatement, {BlockStatement};</span></span>
<span class="line"><span style="color:#E1E4E8;">BlockStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalClassOrInterfaceDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> LocalVariableDeclarationStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalClassOrInterfaceDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> NormalInterfaceDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalVariableDeclarationStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalVariableDeclaration, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalVariableDeclaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {VariableModifier}, LocalVariableType, VariableDeclaratorList;</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalVariableType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;var&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StatementWithoutTrailingSubstatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> LabeledStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> IfThenStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> IfThenElseStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> WhileStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ForStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">StatementNoShortIf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StatementWithoutTrailingSubstatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> LabeledStatementNoShortIf </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> IfThenElseStatementNoShortIf </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> WhileStatementNoShortIf </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ForStatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">StatementWithoutTrailingSubstatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Block </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> EmptyStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ExpressionStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> AssertStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> SwitchStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> DoStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> BreakStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ContinueStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ReturnStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> SynchronizedStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ThrowStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TryStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> YieldStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">EmptyStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">LabeledStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">LabeledStatementNoShortIf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Identifier, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">ExpressionStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StatementExpression, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">StatementExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Assignment </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PreIncrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PreDecrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PostIncrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PostDecrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MethodInvocation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassInstanceCreationExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">IfThenStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">IfThenElseStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf, </span><span style="color:#9ECBFF;">&quot;else&quot;</span><span style="color:#E1E4E8;">, Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">IfThenElseStatementNoShortIf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf, </span><span style="color:#9ECBFF;">&quot;else&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">AssertStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;assert&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;assert&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">SwitchStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;switch&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, SwitchBlock;</span></span>
<span class="line"><span style="color:#E1E4E8;">SwitchBlock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, SwitchRule, {SwitchRule}, </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;"> ) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, {SwitchBlockStatementGroup}, {SwitchLabel, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">SwitchRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SwitchLabel, </span><span style="color:#9ECBFF;">&quot;-&gt;&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">(SwitchLabel, </span><span style="color:#9ECBFF;">&quot;-&gt;&quot;</span><span style="color:#E1E4E8;">, Block) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (SwitchLabel, </span><span style="color:#9ECBFF;">&quot;-&gt;&quot;</span><span style="color:#E1E4E8;">, ThrowStatement);</span></span>
<span class="line"><span style="color:#E1E4E8;">SwitchBlockStatementGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SwitchLabel, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, {SwitchLabel, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">}, BlockStatements;</span></span>
<span class="line"><span style="color:#E1E4E8;">SwitchLabel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;case&quot;</span><span style="color:#E1E4E8;">, CaseConstant, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, CaseConstant}) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">CaseConstant </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConditionalExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">WhileStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;while&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">WhileStatementNoShortIf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;while&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">DoStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;do&quot;</span><span style="color:#E1E4E8;">, Statement, </span><span style="color:#9ECBFF;">&quot;while&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ForStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BasicForStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> EnhancedForStatement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ForStatementNoShortIf </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> BasicForStatementNoShortIf </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> EnhancedForStatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">BasicForStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;for&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ForInit], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">, [Expression], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">, [ForUpdate], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">BasicForStatementNoShortIf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;for&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ForInit], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">, [Expression], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">, [ForUpdate], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">ForInit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StatementExpressionList </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> LocalVariableDeclaration;</span></span>
<span class="line"><span style="color:#E1E4E8;">ForUpdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StatementExpressionList;</span></span>
<span class="line"><span style="color:#E1E4E8;">StatementExpressionList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StatementExpression, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, StatementExpression};</span></span>
<span class="line"><span style="color:#E1E4E8;">EnhancedForStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;for&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, LocalVariableDeclaration, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, Statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">EnhancedForStatementNoShortIf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;for&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, LocalVariableDeclaration, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#E1E4E8;">BreakStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">, [Identifier], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">YieldStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;yield&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ContinueStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;continue&quot;</span><span style="color:#E1E4E8;">, [Identifier], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ReturnStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;return&quot;</span><span style="color:#E1E4E8;"> [Expression], </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ThrowStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;throw&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">SynchronizedStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;synchronized&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, Block;</span></span>
<span class="line"><span style="color:#E1E4E8;">TryStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;try&quot;</span><span style="color:#E1E4E8;">, Block, Catches) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;try&quot;</span><span style="color:#E1E4E8;">, Block, [Catches], Finally ) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> TryWithResourcesStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">Catches </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CatchClause, {CatchClause};</span></span>
<span class="line"><span style="color:#E1E4E8;">CatchClause </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;catch&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, CatchFormalParameter, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, Block;</span></span>
<span class="line"><span style="color:#E1E4E8;">CatchFormalParameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {VariableModifier}, CatchType, VariableDeclaratorId;</span></span>
<span class="line"><span style="color:#E1E4E8;">CatchType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannClassType, {</span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;">, ClassType};</span></span>
<span class="line"><span style="color:#E1E4E8;">Finally </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;finally&quot;</span><span style="color:#E1E4E8;">, Block;</span></span>
<span class="line"><span style="color:#E1E4E8;">TryWithResourcesStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;try&quot;</span><span style="color:#E1E4E8;">, ResourceSpecification, Block, [Catches], [Finally];</span></span>
<span class="line"><span style="color:#E1E4E8;">ResourceSpecification </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, ResourceList, [</span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ResourceList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resource, {</span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">, Resource};</span></span>
<span class="line"><span style="color:#E1E4E8;">Resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalVariableDeclaration </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> VariableAccess;</span></span>
<span class="line"><span style="color:#E1E4E8;">Pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypePattern;</span></span>
<span class="line"><span style="color:#E1E4E8;">TypePattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalVariableDeclaration;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Expressions </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Primary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PrimaryNoNewArray </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ArrayCreationExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">PrimaryNoNewArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Literal </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassLiteral </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;this&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;this&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;"> ) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ClassInstanceCreationExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> FieldAccess </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ArrayAccess </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MethodInvocation </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> MethodReference;</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassLiteral </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TypeName, { </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (NumericType, {</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;boolean&quot;</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;void&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassInstanceCreationExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnqualifiedClassInstanceCreationExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ExpressionName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, UnqualifiedClassInstanceCreationExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">(Primary, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, UnqualifiedClassInstanceCreationExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">UnqualifiedClassInstanceCreationExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], ClassOrInterfaceTypeToInstantiate, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, [ClassBody];</span></span>
<span class="line"><span style="color:#E1E4E8;">ClassOrInterfaceTypeToInstantiate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {Annotation}, Identifier, {</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, {Annotation}, Identifier}, [TypeArgumentsOrDiamond];</span></span>
<span class="line"><span style="color:#E1E4E8;">TypeArgumentsOrDiamond </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeArguments </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;&lt;&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayCreationExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ArrayCreationExpressionWithoutInitializer </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ArrayCreationExpressionWithInitializer;</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayCreationExpressionWithoutInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">, PrimitiveType, DimExprs, [Dims]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">, ClassOrInterfaceType, DimExprs, [Dims]);</span></span>
<span class="line"><span style="color:#E1E4E8;">ArrayCreationExpressionWithInitializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">, PrimitiveType, Dims, ArrayInitializer) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">, ClassOrInterfaceType, Dims, ArrayInitializer);</span></span>
<span class="line"><span style="color:#E1E4E8;">DimExprs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DimExpr, {DimExpr};</span></span>
<span class="line"><span style="color:#E1E4E8;">DimExpr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({Annotation}, [ Expression ]) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ArrayAccess, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, ExpressionName, </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (PrimaryNoNewArray, </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ArrayCreationExpressionWithInitializer, </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">FieldAccess </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Primary, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier), (</span><span style="color:#9ECBFF;">&quot;super&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier), (TypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, Identifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodInvocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (MethodName, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ExpressionName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (Primary, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;super&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;super&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [ArgumentList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ArgumentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Expression, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, Expression};</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodReference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ExpressionName, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (Primary, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ReferenceType, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;super&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (TypeName, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], Identifier) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ClassType, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, [TypeArguments], </span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ArrayType, </span><span style="color:#9ECBFF;">&quot;::&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;new&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Expression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LambdaExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> AssignmentExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">LambdaExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LambdaParameters, </span><span style="color:#9ECBFF;">&quot;-&gt;&quot;</span><span style="color:#E1E4E8;">, LambdaBody;</span></span>
<span class="line"><span style="color:#E1E4E8;">LambdaParameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, [LambdaParameterList], </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Identifier;</span></span>
<span class="line"><span style="color:#E1E4E8;">LambdaParameterList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (LambdaParameter, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, LambdaParameter}) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (Identifier, {</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, Identifier});</span></span>
<span class="line"><span style="color:#E1E4E8;">LambdaParameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({VariableModifier}, LambdaParameterType, VariableDeclaratorId) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> VariableArityParameter;</span></span>
<span class="line"><span style="color:#E1E4E8;">LambdaParameterType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnannType </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;var&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">LambdaBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Expression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Block;</span></span>
<span class="line"><span style="color:#E1E4E8;">AssignmentExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConditionalExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Assignment;</span></span>
<span class="line"><span style="color:#E1E4E8;">Assignment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LeftHandSide </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> AssignmentOperator </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Expression;</span></span>
<span class="line"><span style="color:#E1E4E8;">LeftHandSide </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExpressionName </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> FieldAccess </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ArrayAccess;</span></span>
<span class="line"><span style="color:#E1E4E8;">AssignmentOperator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;+=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;&lt;=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&gt;&gt;=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&gt;&gt;&gt;=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&amp;=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;^=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;|=&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConditionalExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConditionalOrExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ConditionalOrExpression, </span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, ConditionalExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ConditionalOrExpression, </span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, LambdaExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">ConditionalOrExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConditionalAndExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ConditionalOrExpression, </span><span style="color:#9ECBFF;">&quot;||&quot;</span><span style="color:#E1E4E8;">, ConditionalAndExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">ConditionalAndExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InclusiveOrExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ConditionalAndExpression, </span><span style="color:#9ECBFF;">&quot;&amp;&amp;&quot;</span><span style="color:#E1E4E8;">, InclusiveOrExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">InclusiveOrExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExclusiveOrExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (InclusiveOrExpression, </span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;">, ExclusiveOrExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">ExclusiveOrExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AndExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ExclusiveOrExpression, </span><span style="color:#9ECBFF;">&quot;^&quot;</span><span style="color:#E1E4E8;">, AndExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">AndExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EqualityExpression, (AndExpression, </span><span style="color:#9ECBFF;">&quot;&amp;&quot;</span><span style="color:#E1E4E8;">, EqualityExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (EqualityExpression, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, RelationalExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (EqualityExpression, </span><span style="color:#9ECBFF;">&quot;==&quot;</span><span style="color:#E1E4E8;">, RelationalExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (EqualityExpression, </span><span style="color:#9ECBFF;">&quot;!=&quot;</span><span style="color:#E1E4E8;">, RelationalExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">RelationalExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShiftExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (RelationalExpression, </span><span style="color:#9ECBFF;">&quot;&lt;&quot;</span><span style="color:#E1E4E8;">, ShiftExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (RelationalExpression, </span><span style="color:#9ECBFF;">&quot;&gt;&quot;</span><span style="color:#E1E4E8;">, ShiftExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (RelationalExpression, </span><span style="color:#9ECBFF;">&quot;&lt;=&quot;</span><span style="color:#E1E4E8;">, ShiftExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (RelationalExpression, </span><span style="color:#9ECBFF;">&quot;&gt;=&quot;</span><span style="color:#E1E4E8;">, ShiftExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (InstanceofExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">InstanceofExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (RelationalExpression, </span><span style="color:#9ECBFF;">&quot;instanceof&quot;</span><span style="color:#E1E4E8;">, ReferenceType) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (RelationalExpression, </span><span style="color:#9ECBFF;">&quot;instanceof&quot;</span><span style="color:#E1E4E8;">, Pattern);</span></span>
<span class="line"><span style="color:#E1E4E8;">ShiftExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AdditiveExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ShiftExpression, </span><span style="color:#9ECBFF;">&quot;&lt;&lt;&quot;</span><span style="color:#E1E4E8;">, AdditiveExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ShiftExpression, </span><span style="color:#9ECBFF;">&quot;&gt;&gt;&quot;</span><span style="color:#E1E4E8;">, AdditiveExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (ShiftExpression, </span><span style="color:#9ECBFF;">&quot;&gt;&gt;&gt;&quot;</span><span style="color:#E1E4E8;">, AdditiveExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">AdditiveExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MultiplicativeExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (AdditiveExpression, </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">, MultiplicativeExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (AdditiveExpression, </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">, MultiplicativeExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">MultiplicativeExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UnaryExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (MultiplicativeExpression, </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (MultiplicativeExpression, </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (MultiplicativeExpression, </span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;">, UnaryExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">UnaryExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PreIncrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PreDecrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> UnaryExpressionNotPlusMinus;</span></span>
<span class="line"><span style="color:#E1E4E8;">PreIncrementExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;++&quot;</span><span style="color:#E1E4E8;">, UnaryExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">PreDecrementExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;--&quot;</span><span style="color:#E1E4E8;">, UnaryExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">UnaryExpressionNotPlusMinus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PostfixExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;~&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> CastExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> SwitchExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">PostfixExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Primary </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ExpressionName </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PostIncrementExpression </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PostDecrementExpression;</span></span>
<span class="line"><span style="color:#E1E4E8;">PostIncrementExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PostfixExpression, </span><span style="color:#9ECBFF;">&quot;++&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">PostDecrementExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PostfixExpression, </span><span style="color:#9ECBFF;">&quot;--&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">CastExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, PrimitiveType, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, UnaryExpression) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, ReferenceType, {AdditionalBound}, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, UnaryExpressionNotPlusMinus) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, ReferenceType, {AdditionalBound}, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, LambdaExpression);</span></span>
<span class="line"><span style="color:#E1E4E8;">SwitchExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;switch&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, Expression, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, SwitchBlock;</span></span>
<span class="line"><span style="color:#E1E4E8;">ConstantExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Expression;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">Block </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, [BlockStatements], </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">BlockStatements </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BlockStatement, {BlockStatement};</span></span>
<span class="line"><span style="color:#24292E;">BlockStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalClassOrInterfaceDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> LocalVariableDeclarationStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Statement;</span></span>
<span class="line"><span style="color:#24292E;">LocalClassOrInterfaceDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> NormalInterfaceDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">LocalVariableDeclarationStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalVariableDeclaration, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">LocalVariableDeclaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {VariableModifier}, LocalVariableType, VariableDeclaratorList;</span></span>
<span class="line"><span style="color:#24292E;">LocalVariableType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;var&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StatementWithoutTrailingSubstatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> LabeledStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> IfThenStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> IfThenElseStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> WhileStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ForStatement;</span></span>
<span class="line"><span style="color:#24292E;">StatementNoShortIf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StatementWithoutTrailingSubstatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> LabeledStatementNoShortIf </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> IfThenElseStatementNoShortIf </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> WhileStatementNoShortIf </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ForStatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">StatementWithoutTrailingSubstatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Block </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> EmptyStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ExpressionStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> AssertStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> SwitchStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> DoStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> BreakStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ContinueStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ReturnStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> SynchronizedStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ThrowStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TryStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> YieldStatement;</span></span>
<span class="line"><span style="color:#24292E;">EmptyStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">LabeledStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, Statement;</span></span>
<span class="line"><span style="color:#24292E;">LabeledStatementNoShortIf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Identifier, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">ExpressionStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StatementExpression, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">StatementExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Assignment </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PreIncrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PreDecrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PostIncrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PostDecrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MethodInvocation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassInstanceCreationExpression;</span></span>
<span class="line"><span style="color:#24292E;">IfThenStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;if&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, Statement;</span></span>
<span class="line"><span style="color:#24292E;">IfThenElseStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;if&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, StatementNoShortIf, </span><span style="color:#032F62;">&quot;else&quot;</span><span style="color:#24292E;">, Statement;</span></span>
<span class="line"><span style="color:#24292E;">IfThenElseStatementNoShortIf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;if&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, StatementNoShortIf, </span><span style="color:#032F62;">&quot;else&quot;</span><span style="color:#24292E;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">AssertStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;assert&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;assert&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">SwitchStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;switch&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, SwitchBlock;</span></span>
<span class="line"><span style="color:#24292E;">SwitchBlock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, SwitchRule, {SwitchRule}, </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;"> ) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">, {SwitchBlockStatementGroup}, {SwitchLabel, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">SwitchRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SwitchLabel, </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">(SwitchLabel, </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#24292E;">, Block) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (SwitchLabel, </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#24292E;">, ThrowStatement);</span></span>
<span class="line"><span style="color:#24292E;">SwitchBlockStatementGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SwitchLabel, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, {SwitchLabel, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">}, BlockStatements;</span></span>
<span class="line"><span style="color:#24292E;">SwitchLabel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;case&quot;</span><span style="color:#24292E;">, CaseConstant, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, CaseConstant}) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">CaseConstant </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConditionalExpression;</span></span>
<span class="line"><span style="color:#24292E;">WhileStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;while&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, Statement;</span></span>
<span class="line"><span style="color:#24292E;">WhileStatementNoShortIf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;while&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">DoStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;do&quot;</span><span style="color:#24292E;">, Statement, </span><span style="color:#032F62;">&quot;while&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ForStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BasicForStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> EnhancedForStatement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ForStatementNoShortIf </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> BasicForStatementNoShortIf </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> EnhancedForStatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">BasicForStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;for&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ForInit], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">, [Expression], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">, [ForUpdate], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, Statement;</span></span>
<span class="line"><span style="color:#24292E;">BasicForStatementNoShortIf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;for&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ForInit], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">, [Expression], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">, [ForUpdate], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">ForInit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StatementExpressionList </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> LocalVariableDeclaration;</span></span>
<span class="line"><span style="color:#24292E;">ForUpdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StatementExpressionList;</span></span>
<span class="line"><span style="color:#24292E;">StatementExpressionList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StatementExpression, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, StatementExpression};</span></span>
<span class="line"><span style="color:#24292E;">EnhancedForStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;for&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, LocalVariableDeclaration, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, Statement;</span></span>
<span class="line"><span style="color:#24292E;">EnhancedForStatementNoShortIf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;for&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, LocalVariableDeclaration, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, StatementNoShortIf;</span></span>
<span class="line"><span style="color:#24292E;">BreakStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">, [Identifier], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">YieldStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;yield&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ContinueStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;continue&quot;</span><span style="color:#24292E;">, [Identifier], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ReturnStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;return&quot;</span><span style="color:#24292E;"> [Expression], </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ThrowStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;throw&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">SynchronizedStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;synchronized&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, Block;</span></span>
<span class="line"><span style="color:#24292E;">TryStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;try&quot;</span><span style="color:#24292E;">, Block, Catches) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;try&quot;</span><span style="color:#24292E;">, Block, [Catches], Finally ) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> TryWithResourcesStatement;</span></span>
<span class="line"><span style="color:#24292E;">Catches </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CatchClause, {CatchClause};</span></span>
<span class="line"><span style="color:#24292E;">CatchClause </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;catch&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, CatchFormalParameter, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, Block;</span></span>
<span class="line"><span style="color:#24292E;">CatchFormalParameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {VariableModifier}, CatchType, VariableDeclaratorId;</span></span>
<span class="line"><span style="color:#24292E;">CatchType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannClassType, {</span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;">, ClassType};</span></span>
<span class="line"><span style="color:#24292E;">Finally </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;finally&quot;</span><span style="color:#24292E;">, Block;</span></span>
<span class="line"><span style="color:#24292E;">TryWithResourcesStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;try&quot;</span><span style="color:#24292E;">, ResourceSpecification, Block, [Catches], [Finally];</span></span>
<span class="line"><span style="color:#24292E;">ResourceSpecification </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, ResourceList, [</span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ResourceList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resource, {</span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">, Resource};</span></span>
<span class="line"><span style="color:#24292E;">Resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalVariableDeclaration </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> VariableAccess;</span></span>
<span class="line"><span style="color:#24292E;">Pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypePattern;</span></span>
<span class="line"><span style="color:#24292E;">TypePattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalVariableDeclaration;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Expressions </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Primary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PrimaryNoNewArray </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ArrayCreationExpression;</span></span>
<span class="line"><span style="color:#24292E;">PrimaryNoNewArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Literal </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassLiteral </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;this&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;this&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> ) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ClassInstanceCreationExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> FieldAccess </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ArrayAccess </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MethodInvocation </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> MethodReference;</span></span>
<span class="line"><span style="color:#24292E;">ClassLiteral </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TypeName, { </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;"> }, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (NumericType, {</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;boolean&quot;</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;void&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ClassInstanceCreationExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnqualifiedClassInstanceCreationExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ExpressionName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, UnqualifiedClassInstanceCreationExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">(Primary, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, UnqualifiedClassInstanceCreationExpression);</span></span>
<span class="line"><span style="color:#24292E;">UnqualifiedClassInstanceCreationExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">, [TypeArguments], ClassOrInterfaceTypeToInstantiate, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, [ClassBody];</span></span>
<span class="line"><span style="color:#24292E;">ClassOrInterfaceTypeToInstantiate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {Annotation}, Identifier, {</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, {Annotation}, Identifier}, [TypeArgumentsOrDiamond];</span></span>
<span class="line"><span style="color:#24292E;">TypeArgumentsOrDiamond </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeArguments </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;&lt;&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&gt;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ArrayCreationExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ArrayCreationExpressionWithoutInitializer </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ArrayCreationExpressionWithInitializer;</span></span>
<span class="line"><span style="color:#24292E;">ArrayCreationExpressionWithoutInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">, PrimitiveType, DimExprs, [Dims]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">, ClassOrInterfaceType, DimExprs, [Dims]);</span></span>
<span class="line"><span style="color:#24292E;">ArrayCreationExpressionWithInitializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">, PrimitiveType, Dims, ArrayInitializer) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">, ClassOrInterfaceType, Dims, ArrayInitializer);</span></span>
<span class="line"><span style="color:#24292E;">DimExprs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DimExpr, {DimExpr};</span></span>
<span class="line"><span style="color:#24292E;">DimExpr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({Annotation}, [ Expression ]) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ArrayAccess, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, ExpressionName, </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (PrimaryNoNewArray, </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ArrayCreationExpressionWithInitializer, </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">FieldAccess </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Primary, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier), (</span><span style="color:#032F62;">&quot;super&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier), (TypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, Identifier);</span></span>
<span class="line"><span style="color:#24292E;">MethodInvocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MethodName, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ExpressionName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (Primary, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;super&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;super&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [ArgumentList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ArgumentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Expression, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, Expression};</span></span>
<span class="line"><span style="color:#24292E;">MethodReference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ExpressionName, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (Primary, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ReferenceType, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;super&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (TypeName, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, [TypeArguments], Identifier) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ClassType, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, [TypeArguments], </span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ArrayType, </span><span style="color:#032F62;">&quot;::&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Expression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LambdaExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> AssignmentExpression;</span></span>
<span class="line"><span style="color:#24292E;">LambdaExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LambdaParameters, </span><span style="color:#032F62;">&quot;-&gt;&quot;</span><span style="color:#24292E;">, LambdaBody;</span></span>
<span class="line"><span style="color:#24292E;">LambdaParameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, [LambdaParameterList], </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Identifier;</span></span>
<span class="line"><span style="color:#24292E;">LambdaParameterList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (LambdaParameter, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, LambdaParameter}) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (Identifier, {</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, Identifier});</span></span>
<span class="line"><span style="color:#24292E;">LambdaParameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({VariableModifier}, LambdaParameterType, VariableDeclaratorId) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> VariableArityParameter;</span></span>
<span class="line"><span style="color:#24292E;">LambdaParameterType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnannType </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;var&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">LambdaBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Expression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Block;</span></span>
<span class="line"><span style="color:#24292E;">AssignmentExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConditionalExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Assignment;</span></span>
<span class="line"><span style="color:#24292E;">Assignment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LeftHandSide </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> AssignmentOperator </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Expression;</span></span>
<span class="line"><span style="color:#24292E;">LeftHandSide </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExpressionName </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> FieldAccess </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ArrayAccess;</span></span>
<span class="line"><span style="color:#24292E;">AssignmentOperator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;+=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;&lt;=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&gt;&gt;=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&gt;&gt;&gt;=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&amp;=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;^=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;|=&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ConditionalExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConditionalOrExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ConditionalOrExpression, </span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, ConditionalExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ConditionalOrExpression, </span><span style="color:#032F62;">&quot;?&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, LambdaExpression);</span></span>
<span class="line"><span style="color:#24292E;">ConditionalOrExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConditionalAndExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ConditionalOrExpression, </span><span style="color:#032F62;">&quot;||&quot;</span><span style="color:#24292E;">, ConditionalAndExpression);</span></span>
<span class="line"><span style="color:#24292E;">ConditionalAndExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InclusiveOrExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ConditionalAndExpression, </span><span style="color:#032F62;">&quot;&amp;&amp;&quot;</span><span style="color:#24292E;">, InclusiveOrExpression);</span></span>
<span class="line"><span style="color:#24292E;">InclusiveOrExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExclusiveOrExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (InclusiveOrExpression, </span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;">, ExclusiveOrExpression);</span></span>
<span class="line"><span style="color:#24292E;">ExclusiveOrExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AndExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ExclusiveOrExpression, </span><span style="color:#032F62;">&quot;^&quot;</span><span style="color:#24292E;">, AndExpression);</span></span>
<span class="line"><span style="color:#24292E;">AndExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EqualityExpression, (AndExpression, </span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">, EqualityExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (EqualityExpression, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, RelationalExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (EqualityExpression, </span><span style="color:#032F62;">&quot;==&quot;</span><span style="color:#24292E;">, RelationalExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (EqualityExpression, </span><span style="color:#032F62;">&quot;!=&quot;</span><span style="color:#24292E;">, RelationalExpression);</span></span>
<span class="line"><span style="color:#24292E;">RelationalExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShiftExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (RelationalExpression, </span><span style="color:#032F62;">&quot;&lt;&quot;</span><span style="color:#24292E;">, ShiftExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (RelationalExpression, </span><span style="color:#032F62;">&quot;&gt;&quot;</span><span style="color:#24292E;">, ShiftExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (RelationalExpression, </span><span style="color:#032F62;">&quot;&lt;=&quot;</span><span style="color:#24292E;">, ShiftExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (RelationalExpression, </span><span style="color:#032F62;">&quot;&gt;=&quot;</span><span style="color:#24292E;">, ShiftExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (InstanceofExpression);</span></span>
<span class="line"><span style="color:#24292E;">InstanceofExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RelationalExpression, </span><span style="color:#032F62;">&quot;instanceof&quot;</span><span style="color:#24292E;">, ReferenceType) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (RelationalExpression, </span><span style="color:#032F62;">&quot;instanceof&quot;</span><span style="color:#24292E;">, Pattern);</span></span>
<span class="line"><span style="color:#24292E;">ShiftExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AdditiveExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ShiftExpression, </span><span style="color:#032F62;">&quot;&lt;&lt;&quot;</span><span style="color:#24292E;">, AdditiveExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ShiftExpression, </span><span style="color:#032F62;">&quot;&gt;&gt;&quot;</span><span style="color:#24292E;">, AdditiveExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (ShiftExpression, </span><span style="color:#032F62;">&quot;&gt;&gt;&gt;&quot;</span><span style="color:#24292E;">, AdditiveExpression);</span></span>
<span class="line"><span style="color:#24292E;">AdditiveExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MultiplicativeExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (AdditiveExpression, </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">, MultiplicativeExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (AdditiveExpression, </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">, MultiplicativeExpression);</span></span>
<span class="line"><span style="color:#24292E;">MultiplicativeExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UnaryExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (MultiplicativeExpression, </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (MultiplicativeExpression, </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (MultiplicativeExpression, </span><span style="color:#032F62;">&quot;%&quot;</span><span style="color:#24292E;">, UnaryExpression);</span></span>
<span class="line"><span style="color:#24292E;">UnaryExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PreIncrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PreDecrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> UnaryExpressionNotPlusMinus;</span></span>
<span class="line"><span style="color:#24292E;">PreIncrementExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;++&quot;</span><span style="color:#24292E;">, UnaryExpression;</span></span>
<span class="line"><span style="color:#24292E;">PreDecrementExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&quot;</span><span style="color:#24292E;">, UnaryExpression;</span></span>
<span class="line"><span style="color:#24292E;">UnaryExpressionNotPlusMinus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PostfixExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;~&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> CastExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> SwitchExpression;</span></span>
<span class="line"><span style="color:#24292E;">PostfixExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Primary </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ExpressionName </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PostIncrementExpression </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PostDecrementExpression;</span></span>
<span class="line"><span style="color:#24292E;">PostIncrementExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PostfixExpression, </span><span style="color:#032F62;">&quot;++&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">PostDecrementExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PostfixExpression, </span><span style="color:#032F62;">&quot;--&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">CastExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, PrimitiveType, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, UnaryExpression) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, ReferenceType, {AdditionalBound}, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, UnaryExpressionNotPlusMinus) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, ReferenceType, {AdditionalBound}, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, LambdaExpression);</span></span>
<span class="line"><span style="color:#24292E;">SwitchExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;switch&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">, Expression, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">, SwitchBlock;</span></span>
<span class="line"><span style="color:#24292E;">ConstantExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Expression;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br></div></div>`,2),ds=s("p",null,[s("img",{src:g,alt:"Blocks, Statements, and Patterns"})],-1),bs=l(`<h2 id="remaining-defects" tabindex="-1">Remaining defects <a class="header-anchor" href="#remaining-defects" aria-label="Permalink to &quot;Remaining defects&quot;">​</a></h2><h3 id="could-you-put-arrow-head-on-all-rerouted-lines" tabindex="-1">Could you put &#39;arrow head&#39; on all rerouted lines? <a class="header-anchor" href="#could-you-put-arrow-head-on-all-rerouted-lines" aria-label="Permalink to &quot;Could you put &#39;arrow head&#39; on all rerouted lines?&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title Could you put </span><span style="color:#9ECBFF;">&#39;arrow head&#39;</span><span style="color:#E1E4E8;"> on all rerouted lines</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title Could you put </span><span style="color:#032F62;">&#39;arrow head&#39;</span><span style="color:#24292E;"> on all rerouted lines</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,3),As=s("p",null,[s("img",{src:I,alt:"Could you put 'arrow head' on all rerouted lines?"})],-1),Cs=l(`<p><em>Fixed by <a href="https://github.com/plantuml/plantuml/commit/5bbb5a8d27e56db31aec97617edfbda6e3082703" target="_blank" rel="noreferrer">EBNF more arrow head</a> on <strong>V1.2024.8</strong></em></p><h3 id="order-issue" tabindex="-1">Order issue <a class="header-anchor" href="#order-issue" aria-label="Permalink to &quot;Order issue&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (one, two), three;</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">one</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">two</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)), </span><span style="color:#B392F0;">three</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (one, two), three;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">one</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">two</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)), </span><span style="color:#6F42C1;">three</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,3),Ds=s("p",null,[s("img",{src:x,alt:"Order issue"})],-1),hs=l(`<p><em>[Ref. <a href="https://forum.plantuml.net/17090/ebnf-perserve-the-order-of-element" target="_blank" rel="noreferrer">QA-17090</a>, fixed by <a href="https://github.com/plantuml/plantuml/commit/9521f6c06f6fa3af96c3d12ceb897c54fb97541a" target="_blank" rel="noreferrer">EBNF concatenation order</a> on <strong>V1.2024.8</strong>]</em></p><h3 id="allow-accentuated-or-unicode-char-on-ebnf-meta-identifier-or-rule-name" tabindex="-1">Allow accentuated or Unicode char on EBNF meta-identifier or rule name. <a class="header-anchor" href="#allow-accentuated-or-unicode-char-on-ebnf-meta-identifier-or-rule-name" aria-label="Permalink to &quot;Allow accentuated or Unicode char on EBNF meta-identifier or rule name.&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Test </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> accentuated or Unicode char</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">alt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> été </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> hiver;</span></span>
<span class="line"><span style="color:#E1E4E8;">hiver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;froid&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">été </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;chaud&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Test </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> accentuated or Unicode char</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">alt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> été </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> hiver;</span></span>
<span class="line"><span style="color:#24292E;">hiver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;froid&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">été </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;chaud&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,3),fs=s("p",null,[s("img",{src:S,alt:"EBNF-22"})],-1),Bs=l(`<p><em>[Ref. <a href="https://forum.plantuml.net/17145/ebnf-allow-accentuated-unicode-char-ebnf-meta-identifier-rule" target="_blank" rel="noreferrer">QA-17145</a> , fixed by <a href="https://github.com/plantuml/plantuml/commit/99ea667a0c3b38fea848a208730d6776d668b5a6" target="_blank" rel="noreferrer">EBNF better unicode support</a> on <strong>V1.2024.8</strong>]</em></p><h3 id="allow-full-restriction-management-with-except-symbol" tabindex="-1">Allow full restriction management with <code>except-symbol &quot;-&quot;</code> <a class="header-anchor" href="#allow-full-restriction-management-with-except-symbol" aria-label="Permalink to &quot;Allow full restriction management with \`except-symbol &quot;-&quot;\`&quot;">​</a></h3><div class="language-puml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">puml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#E1E4E8;">title First [modified] example </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> §</span><span style="color:#79B8FF;">5.8</span><span style="color:#E1E4E8;"> Syntactic</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">term </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ISO</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">EBNF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">letter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Z&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">vowel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;E&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;O&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;U&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">consonant </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> letter </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> vowel;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endebnf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#24292E;">title First [modified] example </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> §</span><span style="color:#005CC5;">5.8</span><span style="color:#24292E;"> Syntactic</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">term </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ISO</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">EBNF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">letter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Z&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">vowel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;E&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;O&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;U&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">consonant </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> letter </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> vowel;</span></span>
<span class="line"><span style="color:#24292E;">@endebnf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,3),_s=s("p",null,[s("img",{src:v,alt:"Allow full restriction management with"})],-1),Ts=l(`<hr><hr><hr><hr><hr><div class="language-plantuml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plantuml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@startebnf</span></span>
<span class="line"><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">include </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//f.umlcn.com/c4.puml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">digit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">excluding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zero </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;4&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;6&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;7&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;8&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;9&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">digit                </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> digit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">excluding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zero;</span></span>
<span class="line"><span style="color:#E1E4E8;">@endyaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@startebnf</span></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#24292E;">include </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//f.umlcn.com/c4.puml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">digit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">excluding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zero </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;6&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;7&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;8&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;9&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">digit                </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> digit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">excluding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zero;</span></span>
<span class="line"><span style="color:#24292E;">@endyaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,6),gs=s("p",null,[s("img",{src:N,alt:"EBNF图/EBNF图"})],-1);function Is(xs,Ss,vs,Ns,Ps,ks){const n=e("center");return t(),r("div",null,[k,a(n,null,{default:o(()=>[L]),_:1}),M,a(n,null,{default:o(()=>[w]),_:1}),V,a(n,null,{default:o(()=>[U]),_:1}),R,a(n,null,{default:o(()=>[O]),_:1}),z,a(n,null,{default:o(()=>[W]),_:1}),G,a(n,null,{default:o(()=>[J]),_:1}),H,a(n,null,{default:o(()=>[Y]),_:1}),j,a(n,null,{default:o(()=>[Q]),_:1}),Z,a(n,null,{default:o(()=>[$]),_:1}),K,a(n,null,{default:o(()=>[X]),_:1}),ss,a(n,null,{default:o(()=>[ns]),_:1}),as,a(n,null,{default:o(()=>[os]),_:1}),ls,a(n,null,{default:o(()=>[ps]),_:1}),es,a(n,null,{default:o(()=>[ts]),_:1}),rs,a(n,null,{default:o(()=>[cs]),_:1}),Es,a(n,null,{default:o(()=>[ys]),_:1}),is,a(n,null,{default:o(()=>[us]),_:1}),Fs,a(n,null,{default:o(()=>[qs]),_:1}),ms,a(n,null,{default:o(()=>[ds]),_:1}),bs,a(n,null,{default:o(()=>[As]),_:1}),Cs,a(n,null,{default:o(()=>[Ds]),_:1}),hs,a(n,null,{default:o(()=>[fs]),_:1}),Bs,a(n,null,{default:o(()=>[_s]),_:1}),Ts,a(n,null,{default:o(()=>[gs]),_:1})])}const ws=p(P,[["render",Is]]);export{Ms as __pageData,ws as default};
